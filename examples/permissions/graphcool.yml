types: ./types.graphql

functions:
  signup:
    type: resolver
    schema: src/email-password/signup.graphql
    handler:
      code: src/email-password/signup.js
  authenticate:
    type: resolver
    schema: src/email-password/authenticate.graphql
    handler:
      code: src/email-password/authenticate.js
  loggedInUser:
    type: resolver
    schema: src/email-password/loggedInUser.graphql
    handler:
      code: src/email-password/loggedInUser.js

# Permission rules
permissions:
  # Everyone can **read** the fields`description` and `imageUrl` 
  # on nodes of type `Post`
  - operation: Post.read
    fields:
      - description
      - imageUrl

  # Only authenticated users can **create** nodes of type `Post`
  - operation: Post.create
    authenticated: true

  # To **update** a node of type `Post`, a `User` must be
  # authenticated and the `author` of the `Post` 
  # (see the permission query in permissions/updatePost.graphql)
  - operation: Post.update
    authenticated: true
    query: permissions/updatePost.graphql  

  # To **delete** a node of type `Post`, a `User` must be
  # authenticated and the `author` of the `Post` or an `ADMIN`
  # (see the permission query in permissions/deletePost.graphql)
  - operation: Post.delete
    authenticated: true
    query: permissions/deletePost.graphql

  # Everyone can **read** the fields `email` and `posts` on
  # nodes of type `User`
  - operation: User.read
    fields: 
      - email
      - posts

  # The **update** the fields `email`, `password` and `posts` on 
  # a node of type `User`, a `User` must be:
  # authenticated and either the "owner" of the `User` or an `ADMIN` 
  # (see the permission query in permissions/updateUserData.graphql)
  - operation: User.update
    authenticated: true
    query: permissions/updateUserData.graphql  
    fields:
      - email
      - password
      - posts

  # The **update** the fields `role` on a node of type `User`,
  # a `User` must be: authenticated and an `ADMIN`
  # (see the permission query in permissions/updateUserData.graphql)
  - operation: User.update
    authenticated: true
    query: permissions/updateUserRole.graphql  
    fields:
      - role

  # The **delete** a node of type `User`, a `User` must be:
  # authenticated and either the "owner" of the `User` or an `ADMIN` 
  # (see the permission query in permissions/deleteUser.graphql)
  - operation: User.delete
    authenticated: true
    query: permissions/deleteUser.graphql

  # To connect and disconnect a `Post` node with a `User` node via the 
  # `UserPosts` relation, a `User` must be authenticated
  - operation: UserPosts.connect
    authenticated: true
  - operation: UserPosts.disconnect
    authenticated: true

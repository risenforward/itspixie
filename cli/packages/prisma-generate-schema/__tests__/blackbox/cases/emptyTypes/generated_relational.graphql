type AggregateOnlyDate {
  count: Int!
}

type AggregateOnlyId {
  count: Int!
}

type AggregateOnlyIdAndARelation {
  count: Int!
}

type AggregateOnlyIdAndARelation2 {
  count: Int!
}

type AggregateOnlyRelation {
  count: Int!
}

type AggregateOnlyRelationA {
  count: Int!
}

type AggregateOnlyRelationB {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createOnlyDate: OnlyDate!
  deleteManyOnlyDates(where: OnlyDateWhereInput): BatchPayload!
  createOnlyId: OnlyId!
  deleteOnlyId(where: OnlyIdWhereUniqueInput!): OnlyId
  deleteManyOnlyIds(where: OnlyIdWhereInput): BatchPayload!
  createOnlyIdAndARelation(data: OnlyIdAndARelationCreateInput!): OnlyIdAndARelation!
  updateOnlyIdAndARelation(data: OnlyIdAndARelationUpdateInput!, where: OnlyIdAndARelationWhereUniqueInput!): OnlyIdAndARelation
  upsertOnlyIdAndARelation(where: OnlyIdAndARelationWhereUniqueInput!, create: OnlyIdAndARelationCreateInput!, update: OnlyIdAndARelationUpdateInput!): OnlyIdAndARelation!
  deleteOnlyIdAndARelation(where: OnlyIdAndARelationWhereUniqueInput!): OnlyIdAndARelation
  deleteManyOnlyIdAndARelations(where: OnlyIdAndARelationWhereInput): BatchPayload!
  createOnlyIdAndARelation2(data: OnlyIdAndARelation2CreateInput!): OnlyIdAndARelation2!
  updateOnlyIdAndARelation2(data: OnlyIdAndARelation2UpdateInput!, where: OnlyIdAndARelation2WhereUniqueInput!): OnlyIdAndARelation2
  upsertOnlyIdAndARelation2(where: OnlyIdAndARelation2WhereUniqueInput!, create: OnlyIdAndARelation2CreateInput!, update: OnlyIdAndARelation2UpdateInput!): OnlyIdAndARelation2!
  deleteOnlyIdAndARelation2(where: OnlyIdAndARelation2WhereUniqueInput!): OnlyIdAndARelation2
  deleteManyOnlyIdAndARelation2s(where: OnlyIdAndARelation2WhereInput): BatchPayload!
  createOnlyRelation: OnlyRelation!
  deleteManyOnlyRelations(where: OnlyRelationWhereInput): BatchPayload!
  createOnlyRelationA(data: OnlyRelationACreateInput!): OnlyRelationA!
  deleteManyOnlyRelationAs(where: OnlyRelationAWhereInput): BatchPayload!
  createOnlyRelationB(data: OnlyRelationBCreateInput!): OnlyRelationB!
  deleteManyOnlyRelationBs(where: OnlyRelationBWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OnlyDate {
  createdAt: DateTime!
}

type OnlyDateConnection {
  pageInfo: PageInfo!
  edges: [OnlyDateEdge]!
  aggregate: AggregateOnlyDate!
}

type OnlyDateEdge {
  node: OnlyDate!
  cursor: String!
}

enum OnlyDateOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyDatePreviousValues {
  createdAt: DateTime!
}

type OnlyDateSubscriptionPayload {
  mutation: MutationType!
  node: OnlyDate
  updatedFields: [String!]
  previousValues: OnlyDatePreviousValues
}

input OnlyDateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyDateWhereInput
  AND: [OnlyDateSubscriptionWhereInput!]
  OR: [OnlyDateSubscriptionWhereInput!]
  NOT: [OnlyDateSubscriptionWhereInput!]
}

input OnlyDateWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [OnlyDateWhereInput!]
  OR: [OnlyDateWhereInput!]
  NOT: [OnlyDateWhereInput!]
}

type OnlyId {
  id: ID!
}

type OnlyIdAndARelation {
  id: ID!
  ref: OnlyId!
}

type OnlyIdAndARelation2 {
  id: ID!
  ref: OnlyId
}

type OnlyIdAndARelation2Connection {
  pageInfo: PageInfo!
  edges: [OnlyIdAndARelation2Edge]!
  aggregate: AggregateOnlyIdAndARelation2!
}

input OnlyIdAndARelation2CreateInput {
  ref: OnlyIdCreateOneInput
}

type OnlyIdAndARelation2Edge {
  node: OnlyIdAndARelation2!
  cursor: String!
}

enum OnlyIdAndARelation2OrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyIdAndARelation2PreviousValues {
  id: ID!
}

type OnlyIdAndARelation2SubscriptionPayload {
  mutation: MutationType!
  node: OnlyIdAndARelation2
  updatedFields: [String!]
  previousValues: OnlyIdAndARelation2PreviousValues
}

input OnlyIdAndARelation2SubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyIdAndARelation2WhereInput
  AND: [OnlyIdAndARelation2SubscriptionWhereInput!]
  OR: [OnlyIdAndARelation2SubscriptionWhereInput!]
  NOT: [OnlyIdAndARelation2SubscriptionWhereInput!]
}

input OnlyIdAndARelation2UpdateInput {
  ref: OnlyIdUpdateOneInput
}

input OnlyIdAndARelation2WhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ref: OnlyIdWhereInput
  AND: [OnlyIdAndARelation2WhereInput!]
  OR: [OnlyIdAndARelation2WhereInput!]
  NOT: [OnlyIdAndARelation2WhereInput!]
}

input OnlyIdAndARelation2WhereUniqueInput {
  id: ID
}

type OnlyIdAndARelationConnection {
  pageInfo: PageInfo!
  edges: [OnlyIdAndARelationEdge]!
  aggregate: AggregateOnlyIdAndARelation!
}

input OnlyIdAndARelationCreateInput {
  ref: OnlyIdCreateOneInput!
}

type OnlyIdAndARelationEdge {
  node: OnlyIdAndARelation!
  cursor: String!
}

enum OnlyIdAndARelationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyIdAndARelationPreviousValues {
  id: ID!
}

type OnlyIdAndARelationSubscriptionPayload {
  mutation: MutationType!
  node: OnlyIdAndARelation
  updatedFields: [String!]
  previousValues: OnlyIdAndARelationPreviousValues
}

input OnlyIdAndARelationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyIdAndARelationWhereInput
  AND: [OnlyIdAndARelationSubscriptionWhereInput!]
  OR: [OnlyIdAndARelationSubscriptionWhereInput!]
  NOT: [OnlyIdAndARelationSubscriptionWhereInput!]
}

input OnlyIdAndARelationUpdateInput {
  ref: OnlyIdUpdateOneRequiredInput
}

input OnlyIdAndARelationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ref: OnlyIdWhereInput
  AND: [OnlyIdAndARelationWhereInput!]
  OR: [OnlyIdAndARelationWhereInput!]
  NOT: [OnlyIdAndARelationWhereInput!]
}

input OnlyIdAndARelationWhereUniqueInput {
  id: ID
}

type OnlyIdConnection {
  pageInfo: PageInfo!
  edges: [OnlyIdEdge]!
  aggregate: AggregateOnlyId!
}

input OnlyIdCreateOneInput {
  connect: OnlyIdWhereUniqueInput
}

type OnlyIdEdge {
  node: OnlyId!
  cursor: String!
}

enum OnlyIdOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyIdPreviousValues {
  id: ID!
}

type OnlyIdSubscriptionPayload {
  mutation: MutationType!
  node: OnlyId
  updatedFields: [String!]
  previousValues: OnlyIdPreviousValues
}

input OnlyIdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyIdWhereInput
  AND: [OnlyIdSubscriptionWhereInput!]
  OR: [OnlyIdSubscriptionWhereInput!]
  NOT: [OnlyIdSubscriptionWhereInput!]
}

input OnlyIdUpdateOneInput {
  delete: Boolean
  disconnect: Boolean
  connect: OnlyIdWhereUniqueInput
}

input OnlyIdUpdateOneRequiredInput {
  connect: OnlyIdWhereUniqueInput
}

input OnlyIdWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [OnlyIdWhereInput!]
  OR: [OnlyIdWhereInput!]
  NOT: [OnlyIdWhereInput!]
}

input OnlyIdWhereUniqueInput {
  id: ID
}

type OnlyRelation {
  ref(where: OnlyDateWhereInput, orderBy: OnlyDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyDate!]
}

type OnlyRelationA {
  ref: OnlyRelationA!
}

type OnlyRelationAConnection {
  pageInfo: PageInfo!
  edges: [OnlyRelationAEdge]!
  aggregate: AggregateOnlyRelationA!
}

input OnlyRelationACreateInput {
  ref: OnlyRelationACreateOneInput!
}

input OnlyRelationACreateOneInput {
  create: OnlyRelationACreateInput
}

type OnlyRelationAEdge {
  node: OnlyRelationA!
  cursor: String!
}

enum OnlyRelationAOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyRelationASubscriptionPayload {
  mutation: MutationType!
  node: OnlyRelationA
  updatedFields: [String!]
}

input OnlyRelationASubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyRelationAWhereInput
  AND: [OnlyRelationASubscriptionWhereInput!]
  OR: [OnlyRelationASubscriptionWhereInput!]
  NOT: [OnlyRelationASubscriptionWhereInput!]
}

input OnlyRelationAWhereInput {
  ref: OnlyRelationAWhereInput
  AND: [OnlyRelationAWhereInput!]
  OR: [OnlyRelationAWhereInput!]
  NOT: [OnlyRelationAWhereInput!]
}

type OnlyRelationB {
  ref: OnlyRelationB
}

type OnlyRelationBConnection {
  pageInfo: PageInfo!
  edges: [OnlyRelationBEdge]!
  aggregate: AggregateOnlyRelationB!
}

input OnlyRelationBCreateInput {
  ref: OnlyRelationBCreateOneInput
}

input OnlyRelationBCreateOneInput {
  create: OnlyRelationBCreateInput
}

type OnlyRelationBEdge {
  node: OnlyRelationB!
  cursor: String!
}

enum OnlyRelationBOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyRelationBSubscriptionPayload {
  mutation: MutationType!
  node: OnlyRelationB
  updatedFields: [String!]
}

input OnlyRelationBSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyRelationBWhereInput
  AND: [OnlyRelationBSubscriptionWhereInput!]
  OR: [OnlyRelationBSubscriptionWhereInput!]
  NOT: [OnlyRelationBSubscriptionWhereInput!]
}

input OnlyRelationBWhereInput {
  ref: OnlyRelationBWhereInput
  AND: [OnlyRelationBWhereInput!]
  OR: [OnlyRelationBWhereInput!]
  NOT: [OnlyRelationBWhereInput!]
}

type OnlyRelationConnection {
  pageInfo: PageInfo!
  edges: [OnlyRelationEdge]!
  aggregate: AggregateOnlyRelation!
}

type OnlyRelationEdge {
  node: OnlyRelation!
  cursor: String!
}

enum OnlyRelationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OnlyRelationSubscriptionPayload {
  mutation: MutationType!
  node: OnlyRelation
  updatedFields: [String!]
}

input OnlyRelationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OnlyRelationWhereInput
  AND: [OnlyRelationSubscriptionWhereInput!]
  OR: [OnlyRelationSubscriptionWhereInput!]
  NOT: [OnlyRelationSubscriptionWhereInput!]
}

input OnlyRelationWhereInput {
  ref_every: OnlyDateWhereInput
  ref_some: OnlyDateWhereInput
  ref_none: OnlyDateWhereInput
  AND: [OnlyRelationWhereInput!]
  OR: [OnlyRelationWhereInput!]
  NOT: [OnlyRelationWhereInput!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  onlyDates(where: OnlyDateWhereInput, orderBy: OnlyDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyDate]!
  onlyDatesConnection(where: OnlyDateWhereInput, orderBy: OnlyDateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyDateConnection!
  onlyId(where: OnlyIdWhereUniqueInput!): OnlyId
  onlyIds(where: OnlyIdWhereInput, orderBy: OnlyIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyId]!
  onlyIdsConnection(where: OnlyIdWhereInput, orderBy: OnlyIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyIdConnection!
  onlyIdAndARelation(where: OnlyIdAndARelationWhereUniqueInput!): OnlyIdAndARelation
  onlyIdAndARelations(where: OnlyIdAndARelationWhereInput, orderBy: OnlyIdAndARelationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyIdAndARelation]!
  onlyIdAndARelationsConnection(where: OnlyIdAndARelationWhereInput, orderBy: OnlyIdAndARelationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyIdAndARelationConnection!
  onlyIdAndARelation2(where: OnlyIdAndARelation2WhereUniqueInput!): OnlyIdAndARelation2
  onlyIdAndARelation2s(where: OnlyIdAndARelation2WhereInput, orderBy: OnlyIdAndARelation2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyIdAndARelation2]!
  onlyIdAndARelation2sConnection(where: OnlyIdAndARelation2WhereInput, orderBy: OnlyIdAndARelation2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyIdAndARelation2Connection!
  onlyRelations(where: OnlyRelationWhereInput, orderBy: OnlyRelationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyRelation]!
  onlyRelationsConnection(where: OnlyRelationWhereInput, orderBy: OnlyRelationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyRelationConnection!
  onlyRelationAs(where: OnlyRelationAWhereInput, orderBy: OnlyRelationAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyRelationA]!
  onlyRelationAsConnection(where: OnlyRelationAWhereInput, orderBy: OnlyRelationAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyRelationAConnection!
  onlyRelationBs(where: OnlyRelationBWhereInput, orderBy: OnlyRelationBOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OnlyRelationB]!
  onlyRelationBsConnection(where: OnlyRelationBWhereInput, orderBy: OnlyRelationBOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OnlyRelationBConnection!
  node(id: ID!): Node
}

type Subscription {
  onlyDate(where: OnlyDateSubscriptionWhereInput): OnlyDateSubscriptionPayload
  onlyId(where: OnlyIdSubscriptionWhereInput): OnlyIdSubscriptionPayload
  onlyIdAndARelation(where: OnlyIdAndARelationSubscriptionWhereInput): OnlyIdAndARelationSubscriptionPayload
  onlyIdAndARelation2(where: OnlyIdAndARelation2SubscriptionWhereInput): OnlyIdAndARelation2SubscriptionPayload
  onlyRelation(where: OnlyRelationSubscriptionWhereInput): OnlyRelationSubscriptionPayload
  onlyRelationA(where: OnlyRelationASubscriptionWhereInput): OnlyRelationASubscriptionPayload
  onlyRelationB(where: OnlyRelationBSubscriptionWhereInput): OnlyRelationBSubscriptionPayload
}

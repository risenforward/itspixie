type A {
  toB: B!
  toB2: B!
  toC: C
}

type AConnection {
  pageInfo: PageInfo!
  edges: [AEdge]!
  aggregate: AggregateA!
}

input ACreateInput {
  toB: BCreateOneWithoutToAInput!
  toB2: BCreateOneWithoutToA2Input!
  toC: CCreateOneWithoutToAInput
}

input ACreateManyWithoutToCInput {
  create: [ACreateWithoutToCInput!]
}

input ACreateOneWithoutToB2Input {
  create: ACreateWithoutToB2Input
}

input ACreateOneWithoutToBInput {
  create: ACreateWithoutToBInput
}

input ACreateWithoutToB2Input {
  toB: BCreateOneWithoutToAInput!
  toC: CCreateOneWithoutToAInput
}

input ACreateWithoutToBInput {
  toB2: BCreateOneWithoutToA2Input!
  toC: CCreateOneWithoutToAInput
}

input ACreateWithoutToCInput {
  toB: BCreateOneWithoutToAInput!
  toB2: BCreateOneWithoutToA2Input!
}

type AEdge {
  node: A!
  cursor: String!
}

type AggregateA {
  count: Int!
}

type AggregateB {
  count: Int!
}

type AggregateC {
  count: Int!
}

enum AOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ASubscriptionPayload {
  mutation: MutationType!
  node: A
  updatedFields: [String!]
}

input ASubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AWhereInput
  AND: [ASubscriptionWhereInput!]
  OR: [ASubscriptionWhereInput!]
  NOT: [ASubscriptionWhereInput!]
}

input AWhereInput {
  AND: [AWhereInput!]
  OR: [AWhereInput!]
  NOT: [AWhereInput!]
}

type B {
  toA: A!
  toA2: A!
  toC: C!
}

type BatchPayload {
  count: Long!
}

type BConnection {
  pageInfo: PageInfo!
  edges: [BEdge]!
  aggregate: AggregateB!
}

input BCreateInput {
  toA: ACreateOneWithoutToBInput!
  toA2: ACreateOneWithoutToB2Input!
  toC: CCreateOneWithoutToBInput!
}

input BCreateManyWithoutToCInput {
  create: [BCreateWithoutToCInput!]
}

input BCreateOneWithoutToA2Input {
  create: BCreateWithoutToA2Input
}

input BCreateOneWithoutToAInput {
  create: BCreateWithoutToAInput
}

input BCreateWithoutToA2Input {
  toA: ACreateOneWithoutToBInput!
  toC: CCreateOneWithoutToBInput!
}

input BCreateWithoutToAInput {
  toA2: ACreateOneWithoutToB2Input!
  toC: CCreateOneWithoutToBInput!
}

input BCreateWithoutToCInput {
  toA: ACreateOneWithoutToBInput!
  toA2: ACreateOneWithoutToB2Input!
}

type BEdge {
  node: B!
  cursor: String!
}

enum BOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BSubscriptionPayload {
  mutation: MutationType!
  node: B
  updatedFields: [String!]
}

input BSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BWhereInput
  AND: [BSubscriptionWhereInput!]
  OR: [BSubscriptionWhereInput!]
  NOT: [BSubscriptionWhereInput!]
}

input BWhereInput {
  AND: [BWhereInput!]
  OR: [BWhereInput!]
  NOT: [BWhereInput!]
}

type C {
  toB(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B!]
  toA(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A!]
}

type CConnection {
  pageInfo: PageInfo!
  edges: [CEdge]!
  aggregate: AggregateC!
}

input CCreateInput {
  toB: BCreateManyWithoutToCInput
  toA: ACreateManyWithoutToCInput
}

input CCreateOneWithoutToAInput {
  create: CCreateWithoutToAInput
}

input CCreateOneWithoutToBInput {
  create: CCreateWithoutToBInput
}

input CCreateWithoutToAInput {
  toB: BCreateManyWithoutToCInput
}

input CCreateWithoutToBInput {
  toA: ACreateManyWithoutToCInput
}

type CEdge {
  node: C!
  cursor: String!
}

enum COrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CSubscriptionPayload {
  mutation: MutationType!
  node: C
  updatedFields: [String!]
}

input CSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CWhereInput
  AND: [CSubscriptionWhereInput!]
  OR: [CSubscriptionWhereInput!]
  NOT: [CSubscriptionWhereInput!]
}

input CWhereInput {
  AND: [CWhereInput!]
  OR: [CWhereInput!]
  NOT: [CWhereInput!]
}

scalar Long

type Mutation {
  createA(data: ACreateInput!): A!
  deleteManyAs(where: AWhereInput): BatchPayload!
  createB(data: BCreateInput!): B!
  deleteManyBs(where: BWhereInput): BatchPayload!
  createC(data: CCreateInput!): C!
  deleteManyCs(where: CWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  as(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A]!
  asConnection(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AConnection!
  bs(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B]!
  bsConnection(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BConnection!
  cs(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [C]!
  csConnection(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CConnection!
  node(id: ID!): Node
}

type Subscription {
  a(where: ASubscriptionWhereInput): ASubscriptionPayload
  b(where: BSubscriptionWhereInput): BSubscriptionPayload
  c(where: CSubscriptionWhereInput): CSubscriptionPayload
}

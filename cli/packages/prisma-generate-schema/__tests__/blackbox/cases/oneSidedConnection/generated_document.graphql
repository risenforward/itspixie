type A {
  x: TypeWithId!
  y: TypeWithoutId!
}

type AConnection {
  pageInfo: PageInfo!
  edges: [AEdge]!
  aggregate: AggregateA!
}

input ACreateInput {
  x: TypeWithIdCreateOneInput!
  y: TypeWithoutIdCreateOneInput!
}

type AEdge {
  node: A!
  cursor: String!
}

type AggregateA {
  count: Int!
}

type AggregateB {
  count: Int!
}

type AggregateC {
  count: Int!
}

type AggregateD {
  count: Int!
}

type AggregateE {
  count: Int!
}

type AggregateF {
  count: Int!
}

type AggregateTypeWithId {
  count: Int!
}

type AggregateTypeWithoutId {
  count: Int!
}

enum AOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ASubscriptionPayload {
  mutation: MutationType!
  node: A
  updatedFields: [String!]
}

input ASubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AWhereInput
  AND: [ASubscriptionWhereInput!]
  OR: [ASubscriptionWhereInput!]
  NOT: [ASubscriptionWhereInput!]
}

input AWhereInput {
  AND: [AWhereInput!]
  OR: [AWhereInput!]
  NOT: [AWhereInput!]
}

type B {
  x: TypeWithId
  y: TypeWithoutId
}

type BatchPayload {
  count: Long!
}

type BConnection {
  pageInfo: PageInfo!
  edges: [BEdge]!
  aggregate: AggregateB!
}

input BCreateInput {
  x: TypeWithIdCreateOneInput
  y: TypeWithoutIdCreateOneInput
}

type BEdge {
  node: B!
  cursor: String!
}

enum BOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BSubscriptionPayload {
  mutation: MutationType!
  node: B
  updatedFields: [String!]
}

input BSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BWhereInput
  AND: [BSubscriptionWhereInput!]
  OR: [BSubscriptionWhereInput!]
  NOT: [BSubscriptionWhereInput!]
}

input BWhereInput {
  AND: [BWhereInput!]
  OR: [BWhereInput!]
  NOT: [BWhereInput!]
}

type C {
  x(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId!]
  y(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId!]
}

type CConnection {
  pageInfo: PageInfo!
  edges: [CEdge]!
  aggregate: AggregateC!
}

input CCreateInput {
  x: TypeWithIdCreateManyInput
  y: TypeWithoutIdCreateManyInput
}

type CEdge {
  node: C!
  cursor: String!
}

enum COrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CSubscriptionPayload {
  mutation: MutationType!
  node: C
  updatedFields: [String!]
}

input CSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CWhereInput
  AND: [CSubscriptionWhereInput!]
  OR: [CSubscriptionWhereInput!]
  NOT: [CSubscriptionWhereInput!]
}

input CWhereInput {
  AND: [CWhereInput!]
  OR: [CWhereInput!]
  NOT: [CWhereInput!]
}

type D {
  id: ID!
  x: TypeWithId!
  y: TypeWithoutId!
}

type DConnection {
  pageInfo: PageInfo!
  edges: [DEdge]!
  aggregate: AggregateD!
}

input DCreateInput {
  x: TypeWithIdCreateOneInput!
  y: TypeWithoutIdCreateOneInput!
}

type DEdge {
  node: D!
  cursor: String!
}

enum DOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DPreviousValues {
  id: ID!
}

type DSubscriptionPayload {
  mutation: MutationType!
  node: D
  updatedFields: [String!]
  previousValues: DPreviousValues
}

input DSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DWhereInput
  AND: [DSubscriptionWhereInput!]
  OR: [DSubscriptionWhereInput!]
  NOT: [DSubscriptionWhereInput!]
}

input DUpdateInput {
  x: TypeWithIdUpdateOneRequiredInput
  y: TypeWithoutIdUpdateOneRequiredInput
}

input DWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [DWhereInput!]
  OR: [DWhereInput!]
  NOT: [DWhereInput!]
}

input DWhereUniqueInput {
  id: ID
}

type E {
  id: ID!
  x: TypeWithId
  y: TypeWithoutId
}

type EConnection {
  pageInfo: PageInfo!
  edges: [EEdge]!
  aggregate: AggregateE!
}

input ECreateInput {
  x: TypeWithIdCreateOneInput
  y: TypeWithoutIdCreateOneInput
}

type EEdge {
  node: E!
  cursor: String!
}

enum EOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EPreviousValues {
  id: ID!
}

type ESubscriptionPayload {
  mutation: MutationType!
  node: E
  updatedFields: [String!]
  previousValues: EPreviousValues
}

input ESubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EWhereInput
  AND: [ESubscriptionWhereInput!]
  OR: [ESubscriptionWhereInput!]
  NOT: [ESubscriptionWhereInput!]
}

input EUpdateInput {
  x: TypeWithIdUpdateOneInput
  y: TypeWithoutIdUpdateOneInput
}

input EWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [EWhereInput!]
  OR: [EWhereInput!]
  NOT: [EWhereInput!]
}

input EWhereUniqueInput {
  id: ID
}

type F {
  id: ID!
  x(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId!]
  y(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId!]
}

type FConnection {
  pageInfo: PageInfo!
  edges: [FEdge]!
  aggregate: AggregateF!
}

input FCreateInput {
  x: TypeWithIdCreateManyInput
  y: TypeWithoutIdCreateManyInput
}

type FEdge {
  node: F!
  cursor: String!
}

enum FOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FPreviousValues {
  id: ID!
}

type FSubscriptionPayload {
  mutation: MutationType!
  node: F
  updatedFields: [String!]
  previousValues: FPreviousValues
}

input FSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FWhereInput
  AND: [FSubscriptionWhereInput!]
  OR: [FSubscriptionWhereInput!]
  NOT: [FSubscriptionWhereInput!]
}

input FUpdateInput {
  x: TypeWithIdUpdateManyInput
  y: TypeWithoutIdUpdateManyInput
}

input FWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [FWhereInput!]
  OR: [FWhereInput!]
  NOT: [FWhereInput!]
}

input FWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createTypeWithId(data: TypeWithIdCreateInput!): TypeWithId!
  updateTypeWithId(data: TypeWithIdUpdateInput!, where: TypeWithIdWhereUniqueInput!): TypeWithId
  updateManyTypeWithIds(data: TypeWithIdUpdateManyMutationInput!, where: TypeWithIdWhereInput): BatchPayload!
  upsertTypeWithId(where: TypeWithIdWhereUniqueInput!, create: TypeWithIdCreateInput!, update: TypeWithIdUpdateInput!): TypeWithId!
  deleteTypeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  deleteManyTypeWithIds(where: TypeWithIdWhereInput): BatchPayload!
  createTypeWithoutId(data: TypeWithoutIdCreateInput!): TypeWithoutId!
  updateManyTypeWithoutIds(data: TypeWithoutIdUpdateManyMutationInput!, where: TypeWithoutIdWhereInput): BatchPayload!
  deleteManyTypeWithoutIds(where: TypeWithoutIdWhereInput): BatchPayload!
  createA(data: ACreateInput!): A!
  deleteManyAs(where: AWhereInput): BatchPayload!
  createB(data: BCreateInput!): B!
  deleteManyBs(where: BWhereInput): BatchPayload!
  createC(data: CCreateInput!): C!
  deleteManyCs(where: CWhereInput): BatchPayload!
  createD(data: DCreateInput!): D!
  updateD(data: DUpdateInput!, where: DWhereUniqueInput!): D
  upsertD(where: DWhereUniqueInput!, create: DCreateInput!, update: DUpdateInput!): D!
  deleteD(where: DWhereUniqueInput!): D
  deleteManyDs(where: DWhereInput): BatchPayload!
  createE(data: ECreateInput!): E!
  updateE(data: EUpdateInput!, where: EWhereUniqueInput!): E
  upsertE(where: EWhereUniqueInput!, create: ECreateInput!, update: EUpdateInput!): E!
  deleteE(where: EWhereUniqueInput!): E
  deleteManyEs(where: EWhereInput): BatchPayload!
  createF(data: FCreateInput!): F!
  updateF(data: FUpdateInput!, where: FWhereUniqueInput!): F
  upsertF(where: FWhereUniqueInput!, create: FCreateInput!, update: FUpdateInput!): F!
  deleteF(where: FWhereUniqueInput!): F
  deleteManyFs(where: FWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  typeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  typeWithIds(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId]!
  typeWithIdsConnection(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithIdConnection!
  typeWithoutIds(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId]!
  typeWithoutIdsConnection(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithoutIdConnection!
  as(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A]!
  asConnection(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AConnection!
  bs(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B]!
  bsConnection(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BConnection!
  cs(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [C]!
  csConnection(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CConnection!
  d(where: DWhereUniqueInput!): D
  ds(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [D]!
  dsConnection(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DConnection!
  e(where: EWhereUniqueInput!): E
  es(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [E]!
  esConnection(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EConnection!
  f(where: FWhereUniqueInput!): F
  fs(where: FWhereInput, orderBy: FOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [F]!
  fsConnection(where: FWhereInput, orderBy: FOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FConnection!
  node(id: ID!): Node
}

type Subscription {
  typeWithId(where: TypeWithIdSubscriptionWhereInput): TypeWithIdSubscriptionPayload
  typeWithoutId(where: TypeWithoutIdSubscriptionWhereInput): TypeWithoutIdSubscriptionPayload
  a(where: ASubscriptionWhereInput): ASubscriptionPayload
  b(where: BSubscriptionWhereInput): BSubscriptionPayload
  c(where: CSubscriptionWhereInput): CSubscriptionPayload
  d(where: DSubscriptionWhereInput): DSubscriptionPayload
  e(where: ESubscriptionWhereInput): ESubscriptionPayload
  f(where: FSubscriptionWhereInput): FSubscriptionPayload
}

type TypeWithId {
  id: ID!
  field: String!
}

type TypeWithIdConnection {
  pageInfo: PageInfo!
  edges: [TypeWithIdEdge]!
  aggregate: AggregateTypeWithId!
}

input TypeWithIdCreateInput {
  field: String!
}

input TypeWithIdCreateManyInput {
  create: [TypeWithIdCreateInput!]
  connect: [TypeWithIdWhereUniqueInput!]
}

input TypeWithIdCreateOneInput {
  create: TypeWithIdCreateInput
  connect: TypeWithIdWhereUniqueInput
}

type TypeWithIdEdge {
  node: TypeWithId!
  cursor: String!
}

enum TypeWithIdOrderByInput {
  id_ASC
  id_DESC
  field_ASC
  field_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TypeWithIdPreviousValues {
  id: ID!
  field: String!
}

input TypeWithIdScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithIdScalarWhereInput!]
  OR: [TypeWithIdScalarWhereInput!]
  NOT: [TypeWithIdScalarWhereInput!]
}

type TypeWithIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithId
  updatedFields: [String!]
  previousValues: TypeWithIdPreviousValues
}

input TypeWithIdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWithIdWhereInput
  AND: [TypeWithIdSubscriptionWhereInput!]
  OR: [TypeWithIdSubscriptionWhereInput!]
  NOT: [TypeWithIdSubscriptionWhereInput!]
}

input TypeWithIdUpdateDataInput {
  field: String
}

input TypeWithIdUpdateInput {
  field: String
}

input TypeWithIdUpdateManyDataInput {
  field: String
}

input TypeWithIdUpdateManyInput {
  create: [TypeWithIdCreateInput!]
  update: [TypeWithIdUpdateWithWhereUniqueNestedInput!]
  upsert: [TypeWithIdUpsertWithWhereUniqueNestedInput!]
  delete: [TypeWithIdWhereUniqueInput!]
  connect: [TypeWithIdWhereUniqueInput!]
  disconnect: [TypeWithIdWhereUniqueInput!]
  deleteMany: [TypeWithIdScalarWhereInput!]
  updateMany: [TypeWithIdUpdateManyWithWhereNestedInput!]
}

input TypeWithIdUpdateManyMutationInput {
  field: String
}

input TypeWithIdUpdateManyWithWhereNestedInput {
  where: TypeWithIdScalarWhereInput!
  data: TypeWithIdUpdateManyDataInput!
}

input TypeWithIdUpdateOneInput {
  create: TypeWithIdCreateInput
  update: TypeWithIdUpdateDataInput
  upsert: TypeWithIdUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TypeWithIdWhereUniqueInput
}

input TypeWithIdUpdateOneRequiredInput {
  create: TypeWithIdCreateInput
  update: TypeWithIdUpdateDataInput
  upsert: TypeWithIdUpsertNestedInput
  connect: TypeWithIdWhereUniqueInput
}

input TypeWithIdUpdateWithWhereUniqueNestedInput {
  where: TypeWithIdWhereUniqueInput!
  data: TypeWithIdUpdateDataInput!
}

input TypeWithIdUpsertNestedInput {
  update: TypeWithIdUpdateDataInput!
  create: TypeWithIdCreateInput!
}

input TypeWithIdUpsertWithWhereUniqueNestedInput {
  where: TypeWithIdWhereUniqueInput!
  update: TypeWithIdUpdateDataInput!
  create: TypeWithIdCreateInput!
}

input TypeWithIdWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithIdWhereInput!]
  OR: [TypeWithIdWhereInput!]
  NOT: [TypeWithIdWhereInput!]
}

input TypeWithIdWhereUniqueInput {
  id: ID
}

type TypeWithoutId {
  field: String!
}

type TypeWithoutIdConnection {
  pageInfo: PageInfo!
  edges: [TypeWithoutIdEdge]!
  aggregate: AggregateTypeWithoutId!
}

input TypeWithoutIdCreateInput {
  field: String!
}

input TypeWithoutIdCreateManyInput {
  create: [TypeWithoutIdCreateInput!]
}

input TypeWithoutIdCreateOneInput {
  create: TypeWithoutIdCreateInput
}

type TypeWithoutIdEdge {
  node: TypeWithoutId!
  cursor: String!
}

enum TypeWithoutIdOrderByInput {
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TypeWithoutIdPreviousValues {
  field: String!
}

input TypeWithoutIdScalarWhereInput {
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithoutIdScalarWhereInput!]
  OR: [TypeWithoutIdScalarWhereInput!]
  NOT: [TypeWithoutIdScalarWhereInput!]
}

type TypeWithoutIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithoutId
  updatedFields: [String!]
  previousValues: TypeWithoutIdPreviousValues
}

input TypeWithoutIdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWithoutIdWhereInput
  AND: [TypeWithoutIdSubscriptionWhereInput!]
  OR: [TypeWithoutIdSubscriptionWhereInput!]
  NOT: [TypeWithoutIdSubscriptionWhereInput!]
}

input TypeWithoutIdUpdateDataInput {
  field: String
}

input TypeWithoutIdUpdateManyDataInput {
  field: String
}

input TypeWithoutIdUpdateManyInput {
  create: [TypeWithoutIdCreateInput!]
  deleteMany: [TypeWithoutIdScalarWhereInput!]
  updateMany: [TypeWithoutIdUpdateManyWithWhereNestedInput!]
}

input TypeWithoutIdUpdateManyMutationInput {
  field: String
}

input TypeWithoutIdUpdateManyWithWhereNestedInput {
  where: TypeWithoutIdScalarWhereInput!
  data: TypeWithoutIdUpdateManyDataInput!
}

input TypeWithoutIdUpdateOneInput {
  create: TypeWithoutIdCreateInput
  update: TypeWithoutIdUpdateDataInput
  upsert: TypeWithoutIdUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input TypeWithoutIdUpdateOneRequiredInput {
  create: TypeWithoutIdCreateInput
  update: TypeWithoutIdUpdateDataInput
  upsert: TypeWithoutIdUpsertNestedInput
}

input TypeWithoutIdUpsertNestedInput {
  update: TypeWithoutIdUpdateDataInput!
  create: TypeWithoutIdCreateInput!
}

input TypeWithoutIdWhereInput {
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithoutIdWhereInput!]
  OR: [TypeWithoutIdWhereInput!]
  NOT: [TypeWithoutIdWhereInput!]
}

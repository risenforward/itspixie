type AggregateStory {
  count: Int!
}

type AggregateUserSpace {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createStory: Story!
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  createUserSpace(data: UserSpaceCreateInput!): UserSpace!
  updateUserSpace(data: UserSpaceUpdateInput!, where: UserSpaceWhereUniqueInput!): UserSpace
  upsertUserSpace(where: UserSpaceWhereUniqueInput!, create: UserSpaceCreateInput!, update: UserSpaceUpdateInput!): UserSpace!
  deleteUserSpace(where: UserSpaceWhereUniqueInput!): UserSpace
  deleteManyUserSpaces(where: UserSpaceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  story(where: StoryWhereUniqueInput!): Story
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  userSpace(where: UserSpaceWhereUniqueInput!): UserSpace
  userSpaces(where: UserSpaceWhereInput, orderBy: UserSpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSpace]!
  userSpacesConnection(where: UserSpaceWhereInput, orderBy: UserSpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserSpaceConnection!
  node(id: ID!): Node
}

type Story {
  id: ID!
}

type StoryConnection {
  pageInfo: PageInfo!
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateManyInput {
  connect: [StoryWhereUniqueInput!]
}

type StoryEdge {
  node: Story!
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StoryPreviousValues {
  id: ID!
}

input StoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
  AND: [StorySubscriptionWhereInput!]
  OR: [StorySubscriptionWhereInput!]
  NOT: [StorySubscriptionWhereInput!]
}

input StoryUpdateManyInput {
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  userSpace(where: UserSpaceSubscriptionWhereInput): UserSpaceSubscriptionPayload
}

type UserSpace {
  id: ID!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
}

type UserSpaceConnection {
  pageInfo: PageInfo!
  edges: [UserSpaceEdge]!
  aggregate: AggregateUserSpace!
}

input UserSpaceCreateInput {
  stories: StoryCreateManyInput
}

type UserSpaceEdge {
  node: UserSpace!
  cursor: String!
}

enum UserSpaceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserSpacePreviousValues {
  id: ID!
}

type UserSpaceSubscriptionPayload {
  mutation: MutationType!
  node: UserSpace
  updatedFields: [String!]
  previousValues: UserSpacePreviousValues
}

input UserSpaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserSpaceWhereInput
  AND: [UserSpaceSubscriptionWhereInput!]
  OR: [UserSpaceSubscriptionWhereInput!]
  NOT: [UserSpaceSubscriptionWhereInput!]
}

input UserSpaceUpdateInput {
  stories: StoryUpdateManyInput
}

input UserSpaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stories_every: StoryWhereInput
  stories_some: StoryWhereInput
  stories_none: StoryWhereInput
  AND: [UserSpaceWhereInput!]
  OR: [UserSpaceWhereInput!]
  NOT: [UserSpaceWhereInput!]
}

input UserSpaceWhereUniqueInput {
  id: ID
}

type AggregateTypeWithId {
  count: Int!
}

type AggregateTypeWithoutId {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTypeWithId(data: TypeWithIdCreateInput!): TypeWithId!
  updateTypeWithId(data: TypeWithIdUpdateInput!, where: TypeWithIdWhereUniqueInput!): TypeWithId
  updateManyTypeWithIds(data: TypeWithIdUpdateManyMutationInput!, where: TypeWithIdWhereInput): BatchPayload!
  upsertTypeWithId(where: TypeWithIdWhereUniqueInput!, create: TypeWithIdCreateInput!, update: TypeWithIdUpdateInput!): TypeWithId!
  deleteTypeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  deleteManyTypeWithIds(where: TypeWithIdWhereInput): BatchPayload!
  createTypeWithoutId(data: TypeWithoutIdCreateInput!): TypeWithoutId!
  updateManyTypeWithoutIds(data: TypeWithoutIdUpdateManyMutationInput!, where: TypeWithoutIdWhereInput): BatchPayload!
  deleteManyTypeWithoutIds(where: TypeWithoutIdWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  typeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  typeWithIds(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId]!
  typeWithIdsConnection(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithIdConnection!
  typeWithoutIds(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId]!
  typeWithoutIdsConnection(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithoutIdConnection!
  node(id: ID!): Node
}

type Subscription {
  typeWithId(where: TypeWithIdSubscriptionWhereInput): TypeWithIdSubscriptionPayload
  typeWithoutId(where: TypeWithoutIdSubscriptionWhereInput): TypeWithoutIdSubscriptionPayload
}

type TypeWithId {
  id: ID!
  field: String!
}

type TypeWithIdConnection {
  pageInfo: PageInfo!
  edges: [TypeWithIdEdge]!
  aggregate: AggregateTypeWithId!
}

input TypeWithIdCreateInput {
  field: String!
}

type TypeWithIdEdge {
  node: TypeWithId!
  cursor: String!
}

enum TypeWithIdOrderByInput {
  id_ASC
  id_DESC
  field_ASC
  field_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TypeWithIdPreviousValues {
  id: ID!
  field: String!
}

type TypeWithIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithId
  updatedFields: [String!]
  previousValues: TypeWithIdPreviousValues
}

input TypeWithIdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWithIdWhereInput
  AND: [TypeWithIdSubscriptionWhereInput!]
  OR: [TypeWithIdSubscriptionWhereInput!]
  NOT: [TypeWithIdSubscriptionWhereInput!]
}

input TypeWithIdUpdateInput {
  field: String
}

input TypeWithIdUpdateManyMutationInput {
  field: String
}

input TypeWithIdWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithIdWhereInput!]
  OR: [TypeWithIdWhereInput!]
  NOT: [TypeWithIdWhereInput!]
}

input TypeWithIdWhereUniqueInput {
  id: ID
}

type TypeWithoutId {
  field: String!
}

type TypeWithoutIdConnection {
  pageInfo: PageInfo!
  edges: [TypeWithoutIdEdge]!
  aggregate: AggregateTypeWithoutId!
}

input TypeWithoutIdCreateInput {
  field: String!
}

type TypeWithoutIdEdge {
  node: TypeWithoutId!
  cursor: String!
}

enum TypeWithoutIdOrderByInput {
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TypeWithoutIdPreviousValues {
  field: String!
}

type TypeWithoutIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithoutId
  updatedFields: [String!]
  previousValues: TypeWithoutIdPreviousValues
}

input TypeWithoutIdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWithoutIdWhereInput
  AND: [TypeWithoutIdSubscriptionWhereInput!]
  OR: [TypeWithoutIdSubscriptionWhereInput!]
  NOT: [TypeWithoutIdSubscriptionWhereInput!]
}

input TypeWithoutIdUpdateManyMutationInput {
  field: String
}

input TypeWithoutIdWhereInput {
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  AND: [TypeWithoutIdWhereInput!]
  OR: [TypeWithoutIdWhereInput!]
  NOT: [TypeWithoutIdWhereInput!]
}

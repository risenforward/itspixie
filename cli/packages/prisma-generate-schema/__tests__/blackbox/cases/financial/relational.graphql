enum ACH_TYPE {
  SAVINGS
  CHECKING
}

type AggregateCampus {
  count: Int!
}

type AggregateFinancialAccount {
  count: Int!
}

type AggregateFinancialPaymentDetail {
  count: Int!
}

type AggregateFinancialScheduledTransaction {
  count: Int!
}

type AggregateFinancialTransaction {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupInvite {
  count: Int!
}

type AggregateGroupMember {
  count: Int!
}

type AggregateGroupRole {
  count: Int!
}

type AggregateGroupType {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregatePhoneNumber {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Campus implements Node {
  id: ID!
  accounts(where: FinancialAccountWhereInput, orderBy: FinancialAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialAccount!]
  description: String
  isActive: Boolean
  organization: Group
  location: Location
  name: String!
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber!]
}

"""
A connection to a list of items.
"""
type CampusConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CampusEdge]!
  aggregate: AggregateCampus!
}

input CampusCreateInput {
  description: String
  isActive: Boolean
  name: String!
  accounts: FinancialAccountCreateManyWithoutCampusesInput
  organization: GroupCreateOneInput
  location: LocationCreateOneInput
  phoneNumbers: PhoneNumberCreateManyInput
}

input CampusCreateManyWithoutAccountsInput {
  create: [CampusCreateWithoutAccountsInput!]
  connect: [CampusWhereUniqueInput!]
}

input CampusCreateWithoutAccountsInput {
  description: String
  isActive: Boolean
  name: String!
  organization: GroupCreateOneInput
  location: LocationCreateOneInput
  phoneNumbers: PhoneNumberCreateManyInput
}

"""
An edge in a connection.
"""
type CampusEdge {
  """
  The item at the end of the edge.
  """
  node: Campus!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CampusOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CampusPreviousValues {
  id: ID!
  description: String
  isActive: Boolean
  name: String!
}

type CampusSubscriptionPayload {
  mutation: MutationType!
  node: Campus
  updatedFields: [String!]
  previousValues: CampusPreviousValues
}

input CampusSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CampusSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CampusSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CampusSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CampusWhereInput
}

input CampusUpdateInput {
  description: String
  isActive: Boolean
  name: String
  accounts: FinancialAccountUpdateManyWithoutCampusesInput
  organization: GroupUpdateOneInput
  location: LocationUpdateOneInput
  phoneNumbers: PhoneNumberUpdateManyInput
}

input CampusUpdateManyMutationInput {
  description: String
  isActive: Boolean
  name: String
}

input CampusUpdateManyWithoutAccountsInput {
  create: [CampusCreateWithoutAccountsInput!]
  connect: [CampusWhereUniqueInput!]
  disconnect: [CampusWhereUniqueInput!]
  delete: [CampusWhereUniqueInput!]
  update: [CampusUpdateWithWhereUniqueWithoutAccountsInput!]
  upsert: [CampusUpsertWithWhereUniqueWithoutAccountsInput!]
}

input CampusUpdateWithoutAccountsDataInput {
  description: String
  isActive: Boolean
  name: String
  organization: GroupUpdateOneInput
  location: LocationUpdateOneInput
  phoneNumbers: PhoneNumberUpdateManyInput
}

input CampusUpdateWithWhereUniqueWithoutAccountsInput {
  where: CampusWhereUniqueInput!
  data: CampusUpdateWithoutAccountsDataInput!
}

input CampusUpsertWithWhereUniqueWithoutAccountsInput {
  where: CampusWhereUniqueInput!
  update: CampusUpdateWithoutAccountsDataInput!
  create: CampusCreateWithoutAccountsInput!
}

input CampusWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CampusWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CampusWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CampusWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  isActive: Boolean
  """
  All values that are not equal to given value.
  """
  isActive_not: Boolean
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  accounts_every: FinancialAccountWhereInput
  accounts_some: FinancialAccountWhereInput
  accounts_none: FinancialAccountWhereInput
  organization: GroupWhereInput
  location: LocationWhereInput
  phoneNumbers_every: PhoneNumberWhereInput
  phoneNumbers_some: PhoneNumberWhereInput
  phoneNumbers_none: PhoneNumberWhereInput
}

input CampusWhereUniqueInput {
  id: ID
}

enum CREDIT_CARD {
  VISA
  MASTERCARD
  AMEX
  DISCOVER
}

enum CURRENCY_TYPE {
  ACH
  CC
}

scalar DateTime

type FinancialAccount implements Node {
  id: ID!
  key: String
  campuses(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campus!]
  description: String!
  isActive: Boolean!
  name: String
}

"""
A connection to a list of items.
"""
type FinancialAccountConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FinancialAccountEdge]!
  aggregate: AggregateFinancialAccount!
}

input FinancialAccountCreateInput {
  key: String
  description: String!
  isActive: Boolean!
  name: String
  campuses: CampusCreateManyWithoutAccountsInput
}

input FinancialAccountCreateManyWithoutCampusesInput {
  create: [FinancialAccountCreateWithoutCampusesInput!]
  connect: [FinancialAccountWhereUniqueInput!]
}

input FinancialAccountCreateOneInput {
  create: FinancialAccountCreateInput
  connect: FinancialAccountWhereUniqueInput
}

input FinancialAccountCreateWithoutCampusesInput {
  key: String
  description: String!
  isActive: Boolean!
  name: String
}

"""
An edge in a connection.
"""
type FinancialAccountEdge {
  """
  The item at the end of the edge.
  """
  node: FinancialAccount!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FinancialAccountOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinancialAccountPreviousValues {
  id: ID!
  key: String
  description: String!
  isActive: Boolean!
  name: String
}

type FinancialAccountSubscriptionPayload {
  mutation: MutationType!
  node: FinancialAccount
  updatedFields: [String!]
  previousValues: FinancialAccountPreviousValues
}

input FinancialAccountSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialAccountSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialAccountSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialAccountSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialAccountWhereInput
}

input FinancialAccountUpdateDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  campuses: CampusUpdateManyWithoutAccountsInput
}

input FinancialAccountUpdateInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  campuses: CampusUpdateManyWithoutAccountsInput
}

input FinancialAccountUpdateManyMutationInput {
  key: String
  description: String
  isActive: Boolean
  name: String
}

input FinancialAccountUpdateManyWithoutCampusesInput {
  create: [FinancialAccountCreateWithoutCampusesInput!]
  connect: [FinancialAccountWhereUniqueInput!]
  disconnect: [FinancialAccountWhereUniqueInput!]
  delete: [FinancialAccountWhereUniqueInput!]
  update: [FinancialAccountUpdateWithWhereUniqueWithoutCampusesInput!]
  upsert: [FinancialAccountUpsertWithWhereUniqueWithoutCampusesInput!]
}

input FinancialAccountUpdateOneInput {
  create: FinancialAccountCreateInput
  connect: FinancialAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FinancialAccountUpdateDataInput
  upsert: FinancialAccountUpsertNestedInput
}

input FinancialAccountUpdateWithoutCampusesDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
}

input FinancialAccountUpdateWithWhereUniqueWithoutCampusesInput {
  where: FinancialAccountWhereUniqueInput!
  data: FinancialAccountUpdateWithoutCampusesDataInput!
}

input FinancialAccountUpsertNestedInput {
  update: FinancialAccountUpdateDataInput!
  create: FinancialAccountCreateInput!
}

input FinancialAccountUpsertWithWhereUniqueWithoutCampusesInput {
  where: FinancialAccountWhereUniqueInput!
  update: FinancialAccountUpdateWithoutCampusesDataInput!
  create: FinancialAccountCreateWithoutCampusesInput!
}

input FinancialAccountWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialAccountWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialAccountWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialAccountWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  key: String
  """
  All values that are not equal to given value.
  """
  key_not: String
  """
  All values that are contained in given list.
  """
  key_in: [String!]
  """
  All values that are not contained in given list.
  """
  key_not_in: [String!]
  """
  All values less than the given value.
  """
  key_lt: String
  """
  All values less than or equal the given value.
  """
  key_lte: String
  """
  All values greater than the given value.
  """
  key_gt: String
  """
  All values greater than or equal the given value.
  """
  key_gte: String
  """
  All values containing the given string.
  """
  key_contains: String
  """
  All values not containing the given string.
  """
  key_not_contains: String
  """
  All values starting with the given string.
  """
  key_starts_with: String
  """
  All values not starting with the given string.
  """
  key_not_starts_with: String
  """
  All values ending with the given string.
  """
  key_ends_with: String
  """
  All values not ending with the given string.
  """
  key_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  isActive: Boolean
  """
  All values that are not equal to given value.
  """
  isActive_not: Boolean
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  campuses_every: CampusWhereInput
  campuses_some: CampusWhereInput
  campuses_none: CampusWhereInput
}

input FinancialAccountWhereUniqueInput {
  id: ID
  key: String
}

type FinancialPaymentDetail implements Node {
  id: ID!
  accountNumberMasked: String!
  billingLocation: Location
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime!
  nameOnCard: String
}

"""
A connection to a list of items.
"""
type FinancialPaymentDetailConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FinancialPaymentDetailEdge]!
  aggregate: AggregateFinancialPaymentDetail!
}

input FinancialPaymentDetailCreateInput {
  accountNumberMasked: String!
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime!
  nameOnCard: String
  billingLocation: LocationCreateOneInput
}

input FinancialPaymentDetailCreateOneInput {
  create: FinancialPaymentDetailCreateInput
  connect: FinancialPaymentDetailWhereUniqueInput
}

"""
An edge in a connection.
"""
type FinancialPaymentDetailEdge {
  """
  The item at the end of the edge.
  """
  node: FinancialPaymentDetail!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FinancialPaymentDetailOrderByInput {
  id_ASC
  id_DESC
  accountNumberMasked_ASC
  accountNumberMasked_DESC
  creditCardType_ASC
  creditCardType_DESC
  achType_ASC
  achType_DESC
  currencyType_ASC
  currencyType_DESC
  expirationDate_ASC
  expirationDate_DESC
  nameOnCard_ASC
  nameOnCard_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinancialPaymentDetailPreviousValues {
  id: ID!
  accountNumberMasked: String!
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime!
  nameOnCard: String
}

type FinancialPaymentDetailSubscriptionPayload {
  mutation: MutationType!
  node: FinancialPaymentDetail
  updatedFields: [String!]
  previousValues: FinancialPaymentDetailPreviousValues
}

input FinancialPaymentDetailSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialPaymentDetailSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialPaymentDetailSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialPaymentDetailSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialPaymentDetailWhereInput
}

input FinancialPaymentDetailUpdateDataInput {
  accountNumberMasked: String
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime
  nameOnCard: String
  billingLocation: LocationUpdateOneInput
}

input FinancialPaymentDetailUpdateInput {
  accountNumberMasked: String
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime
  nameOnCard: String
  billingLocation: LocationUpdateOneInput
}

input FinancialPaymentDetailUpdateManyMutationInput {
  accountNumberMasked: String
  creditCardType: CREDIT_CARD
  achType: ACH_TYPE
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime
  nameOnCard: String
}

input FinancialPaymentDetailUpdateOneInput {
  create: FinancialPaymentDetailCreateInput
  connect: FinancialPaymentDetailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FinancialPaymentDetailUpdateDataInput
  upsert: FinancialPaymentDetailUpsertNestedInput
}

input FinancialPaymentDetailUpsertNestedInput {
  update: FinancialPaymentDetailUpdateDataInput!
  create: FinancialPaymentDetailCreateInput!
}

input FinancialPaymentDetailWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialPaymentDetailWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialPaymentDetailWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialPaymentDetailWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  accountNumberMasked: String
  """
  All values that are not equal to given value.
  """
  accountNumberMasked_not: String
  """
  All values that are contained in given list.
  """
  accountNumberMasked_in: [String!]
  """
  All values that are not contained in given list.
  """
  accountNumberMasked_not_in: [String!]
  """
  All values less than the given value.
  """
  accountNumberMasked_lt: String
  """
  All values less than or equal the given value.
  """
  accountNumberMasked_lte: String
  """
  All values greater than the given value.
  """
  accountNumberMasked_gt: String
  """
  All values greater than or equal the given value.
  """
  accountNumberMasked_gte: String
  """
  All values containing the given string.
  """
  accountNumberMasked_contains: String
  """
  All values not containing the given string.
  """
  accountNumberMasked_not_contains: String
  """
  All values starting with the given string.
  """
  accountNumberMasked_starts_with: String
  """
  All values not starting with the given string.
  """
  accountNumberMasked_not_starts_with: String
  """
  All values ending with the given string.
  """
  accountNumberMasked_ends_with: String
  """
  All values not ending with the given string.
  """
  accountNumberMasked_not_ends_with: String
  creditCardType: CREDIT_CARD
  """
  All values that are not equal to given value.
  """
  creditCardType_not: CREDIT_CARD
  """
  All values that are contained in given list.
  """
  creditCardType_in: [CREDIT_CARD!]
  """
  All values that are not contained in given list.
  """
  creditCardType_not_in: [CREDIT_CARD!]
  achType: ACH_TYPE
  """
  All values that are not equal to given value.
  """
  achType_not: ACH_TYPE
  """
  All values that are contained in given list.
  """
  achType_in: [ACH_TYPE!]
  """
  All values that are not contained in given list.
  """
  achType_not_in: [ACH_TYPE!]
  currencyType: CURRENCY_TYPE
  """
  All values that are not equal to given value.
  """
  currencyType_not: CURRENCY_TYPE
  """
  All values that are contained in given list.
  """
  currencyType_in: [CURRENCY_TYPE!]
  """
  All values that are not contained in given list.
  """
  currencyType_not_in: [CURRENCY_TYPE!]
  expirationDate: DateTime
  """
  All values that are not equal to given value.
  """
  expirationDate_not: DateTime
  """
  All values that are contained in given list.
  """
  expirationDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  expirationDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  expirationDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  expirationDate_lte: DateTime
  """
  All values greater than the given value.
  """
  expirationDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  expirationDate_gte: DateTime
  nameOnCard: String
  """
  All values that are not equal to given value.
  """
  nameOnCard_not: String
  """
  All values that are contained in given list.
  """
  nameOnCard_in: [String!]
  """
  All values that are not contained in given list.
  """
  nameOnCard_not_in: [String!]
  """
  All values less than the given value.
  """
  nameOnCard_lt: String
  """
  All values less than or equal the given value.
  """
  nameOnCard_lte: String
  """
  All values greater than the given value.
  """
  nameOnCard_gt: String
  """
  All values greater than or equal the given value.
  """
  nameOnCard_gte: String
  """
  All values containing the given string.
  """
  nameOnCard_contains: String
  """
  All values not containing the given string.
  """
  nameOnCard_not_contains: String
  """
  All values starting with the given string.
  """
  nameOnCard_starts_with: String
  """
  All values not starting with the given string.
  """
  nameOnCard_not_starts_with: String
  """
  All values ending with the given string.
  """
  nameOnCard_ends_with: String
  """
  All values not ending with the given string.
  """
  nameOnCard_not_ends_with: String
  billingLocation: LocationWhereInput
}

input FinancialPaymentDetailWhereUniqueInput {
  id: ID
}

type FinancialScheduledTransaction implements Node {
  id: ID!
  person: Person
  endDate: DateTime
  payment: FinancialPaymentDetail
  isActive: Boolean!
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  transactions(where: FinancialTransactionWhereInput, orderBy: FinancialTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialTransaction!]
  account: FinancialAccount
  amount: Float!
}

"""
A connection to a list of items.
"""
type FinancialScheduledTransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FinancialScheduledTransactionEdge]!
  aggregate: AggregateFinancialScheduledTransaction!
}

input FinancialScheduledTransactionCreateInput {
  endDate: DateTime
  isActive: Boolean!
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float!
  person: PersonCreateOneWithoutScheduledTransactionsInput
  payment: FinancialPaymentDetailCreateOneInput
  transactions: FinancialTransactionCreateManyWithoutScheduledTransactionInput
  account: FinancialAccountCreateOneInput
}

input FinancialScheduledTransactionCreateManyWithoutPersonInput {
  create: [FinancialScheduledTransactionCreateWithoutPersonInput!]
  connect: [FinancialScheduledTransactionWhereUniqueInput!]
}

input FinancialScheduledTransactionCreateOneWithoutTransactionsInput {
  create: FinancialScheduledTransactionCreateWithoutTransactionsInput
  connect: FinancialScheduledTransactionWhereUniqueInput
}

input FinancialScheduledTransactionCreateWithoutPersonInput {
  endDate: DateTime
  isActive: Boolean!
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float!
  payment: FinancialPaymentDetailCreateOneInput
  transactions: FinancialTransactionCreateManyWithoutScheduledTransactionInput
  account: FinancialAccountCreateOneInput
}

input FinancialScheduledTransactionCreateWithoutTransactionsInput {
  endDate: DateTime
  isActive: Boolean!
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float!
  person: PersonCreateOneWithoutScheduledTransactionsInput
  payment: FinancialPaymentDetailCreateOneInput
  account: FinancialAccountCreateOneInput
}

"""
An edge in a connection.
"""
type FinancialScheduledTransactionEdge {
  """
  The item at the end of the edge.
  """
  node: FinancialScheduledTransaction!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FinancialScheduledTransactionOrderByInput {
  id_ASC
  id_DESC
  endDate_ASC
  endDate_DESC
  isActive_ASC
  isActive_DESC
  startDate_ASC
  startDate_DESC
  frequency_ASC
  frequency_DESC
  amount_ASC
  amount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinancialScheduledTransactionPreviousValues {
  id: ID!
  endDate: DateTime
  isActive: Boolean!
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float!
}

type FinancialScheduledTransactionSubscriptionPayload {
  mutation: MutationType!
  node: FinancialScheduledTransaction
  updatedFields: [String!]
  previousValues: FinancialScheduledTransactionPreviousValues
}

input FinancialScheduledTransactionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialScheduledTransactionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialScheduledTransactionSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialScheduledTransactionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialScheduledTransactionWhereInput
}

input FinancialScheduledTransactionUpdateInput {
  endDate: DateTime
  isActive: Boolean
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float
  person: PersonUpdateOneWithoutScheduledTransactionsInput
  payment: FinancialPaymentDetailUpdateOneInput
  transactions: FinancialTransactionUpdateManyWithoutScheduledTransactionInput
  account: FinancialAccountUpdateOneInput
}

input FinancialScheduledTransactionUpdateManyMutationInput {
  endDate: DateTime
  isActive: Boolean
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float
}

input FinancialScheduledTransactionUpdateManyWithoutPersonInput {
  create: [FinancialScheduledTransactionCreateWithoutPersonInput!]
  connect: [FinancialScheduledTransactionWhereUniqueInput!]
  disconnect: [FinancialScheduledTransactionWhereUniqueInput!]
  delete: [FinancialScheduledTransactionWhereUniqueInput!]
  update: [FinancialScheduledTransactionUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [FinancialScheduledTransactionUpsertWithWhereUniqueWithoutPersonInput!]
}

input FinancialScheduledTransactionUpdateOneWithoutTransactionsInput {
  create: FinancialScheduledTransactionCreateWithoutTransactionsInput
  connect: FinancialScheduledTransactionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FinancialScheduledTransactionUpdateWithoutTransactionsDataInput
  upsert: FinancialScheduledTransactionUpsertWithoutTransactionsInput
}

input FinancialScheduledTransactionUpdateWithoutPersonDataInput {
  endDate: DateTime
  isActive: Boolean
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float
  payment: FinancialPaymentDetailUpdateOneInput
  transactions: FinancialTransactionUpdateManyWithoutScheduledTransactionInput
  account: FinancialAccountUpdateOneInput
}

input FinancialScheduledTransactionUpdateWithoutTransactionsDataInput {
  endDate: DateTime
  isActive: Boolean
  startDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  amount: Float
  person: PersonUpdateOneWithoutScheduledTransactionsInput
  payment: FinancialPaymentDetailUpdateOneInput
  account: FinancialAccountUpdateOneInput
}

input FinancialScheduledTransactionUpdateWithWhereUniqueWithoutPersonInput {
  where: FinancialScheduledTransactionWhereUniqueInput!
  data: FinancialScheduledTransactionUpdateWithoutPersonDataInput!
}

input FinancialScheduledTransactionUpsertWithoutTransactionsInput {
  update: FinancialScheduledTransactionUpdateWithoutTransactionsDataInput!
  create: FinancialScheduledTransactionCreateWithoutTransactionsInput!
}

input FinancialScheduledTransactionUpsertWithWhereUniqueWithoutPersonInput {
  where: FinancialScheduledTransactionWhereUniqueInput!
  update: FinancialScheduledTransactionUpdateWithoutPersonDataInput!
  create: FinancialScheduledTransactionCreateWithoutPersonInput!
}

input FinancialScheduledTransactionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialScheduledTransactionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialScheduledTransactionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialScheduledTransactionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  endDate: DateTime
  """
  All values that are not equal to given value.
  """
  endDate_not: DateTime
  """
  All values that are contained in given list.
  """
  endDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  endDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  endDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  endDate_lte: DateTime
  """
  All values greater than the given value.
  """
  endDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  endDate_gte: DateTime
  isActive: Boolean
  """
  All values that are not equal to given value.
  """
  isActive_not: Boolean
  startDate: DateTime
  """
  All values that are not equal to given value.
  """
  startDate_not: DateTime
  """
  All values that are contained in given list.
  """
  startDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  startDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  startDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  startDate_lte: DateTime
  """
  All values greater than the given value.
  """
  startDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  startDate_gte: DateTime
  frequency: TRANSACTION_FREQUENCY
  """
  All values that are not equal to given value.
  """
  frequency_not: TRANSACTION_FREQUENCY
  """
  All values that are contained in given list.
  """
  frequency_in: [TRANSACTION_FREQUENCY!]
  """
  All values that are not contained in given list.
  """
  frequency_not_in: [TRANSACTION_FREQUENCY!]
  amount: Float
  """
  All values that are not equal to given value.
  """
  amount_not: Float
  """
  All values that are contained in given list.
  """
  amount_in: [Float!]
  """
  All values that are not contained in given list.
  """
  amount_not_in: [Float!]
  """
  All values less than the given value.
  """
  amount_lt: Float
  """
  All values less than or equal the given value.
  """
  amount_lte: Float
  """
  All values greater than the given value.
  """
  amount_gt: Float
  """
  All values greater than or equal the given value.
  """
  amount_gte: Float
  person: PersonWhereInput
  payment: FinancialPaymentDetailWhereInput
  transactions_every: FinancialTransactionWhereInput
  transactions_some: FinancialTransactionWhereInput
  transactions_none: FinancialTransactionWhereInput
  account: FinancialAccountWhereInput
}

input FinancialScheduledTransactionWhereUniqueInput {
  id: ID
}

type FinancialTransaction implements Node {
  id: ID!
  payment: FinancialPaymentDetail
  person: Person
  processedDate: DateTime
  scheduledTransaction: FinancialScheduledTransaction
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  amount: Float!
  account: FinancialAccount
  organization: Group!
}

"""
A connection to a list of items.
"""
type FinancialTransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FinancialTransactionEdge]!
  aggregate: AggregateFinancialTransaction!
}

input FinancialTransactionCreateInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  amount: Float!
  payment: FinancialPaymentDetailCreateOneInput
  person: PersonCreateOneWithoutTransactionsInput
  scheduledTransaction: FinancialScheduledTransactionCreateOneWithoutTransactionsInput
  account: FinancialAccountCreateOneInput
  organization: GroupCreateOneInput!
}

input FinancialTransactionCreateManyWithoutPersonInput {
  create: [FinancialTransactionCreateWithoutPersonInput!]
  connect: [FinancialTransactionWhereUniqueInput!]
}

input FinancialTransactionCreateManyWithoutScheduledTransactionInput {
  create: [FinancialTransactionCreateWithoutScheduledTransactionInput!]
  connect: [FinancialTransactionWhereUniqueInput!]
}

input FinancialTransactionCreateWithoutPersonInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  amount: Float!
  payment: FinancialPaymentDetailCreateOneInput
  scheduledTransaction: FinancialScheduledTransactionCreateOneWithoutTransactionsInput
  account: FinancialAccountCreateOneInput
  organization: GroupCreateOneInput!
}

input FinancialTransactionCreateWithoutScheduledTransactionInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  amount: Float!
  payment: FinancialPaymentDetailCreateOneInput
  person: PersonCreateOneWithoutTransactionsInput
  account: FinancialAccountCreateOneInput
  organization: GroupCreateOneInput!
}

"""
An edge in a connection.
"""
type FinancialTransactionEdge {
  """
  The item at the end of the edge.
  """
  node: FinancialTransaction!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FinancialTransactionOrderByInput {
  id_ASC
  id_DESC
  processedDate_ASC
  processedDate_DESC
  status_ASC
  status_DESC
  transactionDate_ASC
  transactionDate_DESC
  amount_ASC
  amount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinancialTransactionPreviousValues {
  id: ID!
  processedDate: DateTime
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  amount: Float!
}

type FinancialTransactionSubscriptionPayload {
  mutation: MutationType!
  node: FinancialTransaction
  updatedFields: [String!]
  previousValues: FinancialTransactionPreviousValues
}

input FinancialTransactionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialTransactionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialTransactionSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialTransactionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialTransactionWhereInput
}

input FinancialTransactionUpdateInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS
  transactionDate: DateTime
  amount: Float
  payment: FinancialPaymentDetailUpdateOneInput
  person: PersonUpdateOneWithoutTransactionsInput
  scheduledTransaction: FinancialScheduledTransactionUpdateOneWithoutTransactionsInput
  account: FinancialAccountUpdateOneInput
  organization: GroupUpdateOneRequiredInput
}

input FinancialTransactionUpdateManyMutationInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS
  transactionDate: DateTime
  amount: Float
}

input FinancialTransactionUpdateManyWithoutPersonInput {
  create: [FinancialTransactionCreateWithoutPersonInput!]
  connect: [FinancialTransactionWhereUniqueInput!]
  disconnect: [FinancialTransactionWhereUniqueInput!]
  delete: [FinancialTransactionWhereUniqueInput!]
  update: [FinancialTransactionUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [FinancialTransactionUpsertWithWhereUniqueWithoutPersonInput!]
}

input FinancialTransactionUpdateManyWithoutScheduledTransactionInput {
  create: [FinancialTransactionCreateWithoutScheduledTransactionInput!]
  connect: [FinancialTransactionWhereUniqueInput!]
  disconnect: [FinancialTransactionWhereUniqueInput!]
  delete: [FinancialTransactionWhereUniqueInput!]
  update: [FinancialTransactionUpdateWithWhereUniqueWithoutScheduledTransactionInput!]
  upsert: [FinancialTransactionUpsertWithWhereUniqueWithoutScheduledTransactionInput!]
}

input FinancialTransactionUpdateWithoutPersonDataInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS
  transactionDate: DateTime
  amount: Float
  payment: FinancialPaymentDetailUpdateOneInput
  scheduledTransaction: FinancialScheduledTransactionUpdateOneWithoutTransactionsInput
  account: FinancialAccountUpdateOneInput
  organization: GroupUpdateOneRequiredInput
}

input FinancialTransactionUpdateWithoutScheduledTransactionDataInput {
  processedDate: DateTime
  status: TRANSACTION_STATUS
  transactionDate: DateTime
  amount: Float
  payment: FinancialPaymentDetailUpdateOneInput
  person: PersonUpdateOneWithoutTransactionsInput
  account: FinancialAccountUpdateOneInput
  organization: GroupUpdateOneRequiredInput
}

input FinancialTransactionUpdateWithWhereUniqueWithoutPersonInput {
  where: FinancialTransactionWhereUniqueInput!
  data: FinancialTransactionUpdateWithoutPersonDataInput!
}

input FinancialTransactionUpdateWithWhereUniqueWithoutScheduledTransactionInput {
  where: FinancialTransactionWhereUniqueInput!
  data: FinancialTransactionUpdateWithoutScheduledTransactionDataInput!
}

input FinancialTransactionUpsertWithWhereUniqueWithoutPersonInput {
  where: FinancialTransactionWhereUniqueInput!
  update: FinancialTransactionUpdateWithoutPersonDataInput!
  create: FinancialTransactionCreateWithoutPersonInput!
}

input FinancialTransactionUpsertWithWhereUniqueWithoutScheduledTransactionInput {
  where: FinancialTransactionWhereUniqueInput!
  update: FinancialTransactionUpdateWithoutScheduledTransactionDataInput!
  create: FinancialTransactionCreateWithoutScheduledTransactionInput!
}

input FinancialTransactionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FinancialTransactionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FinancialTransactionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FinancialTransactionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  processedDate: DateTime
  """
  All values that are not equal to given value.
  """
  processedDate_not: DateTime
  """
  All values that are contained in given list.
  """
  processedDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  processedDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  processedDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  processedDate_lte: DateTime
  """
  All values greater than the given value.
  """
  processedDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  processedDate_gte: DateTime
  status: TRANSACTION_STATUS
  """
  All values that are not equal to given value.
  """
  status_not: TRANSACTION_STATUS
  """
  All values that are contained in given list.
  """
  status_in: [TRANSACTION_STATUS!]
  """
  All values that are not contained in given list.
  """
  status_not_in: [TRANSACTION_STATUS!]
  transactionDate: DateTime
  """
  All values that are not equal to given value.
  """
  transactionDate_not: DateTime
  """
  All values that are contained in given list.
  """
  transactionDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  transactionDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  transactionDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  transactionDate_lte: DateTime
  """
  All values greater than the given value.
  """
  transactionDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  transactionDate_gte: DateTime
  amount: Float
  """
  All values that are not equal to given value.
  """
  amount_not: Float
  """
  All values that are contained in given list.
  """
  amount_in: [Float!]
  """
  All values that are not contained in given list.
  """
  amount_not_in: [Float!]
  """
  All values less than the given value.
  """
  amount_lt: Float
  """
  All values less than or equal the given value.
  """
  amount_lte: Float
  """
  All values greater than the given value.
  """
  amount_gt: Float
  """
  All values greater than or equal the given value.
  """
  amount_gte: Float
  payment: FinancialPaymentDetailWhereInput
  person: PersonWhereInput
  scheduledTransaction: FinancialScheduledTransactionWhereInput
  account: FinancialAccountWhereInput
  organization: GroupWhereInput
}

input FinancialTransactionWhereUniqueInput {
  id: ID
}

type Group implements Node {
  id: ID!
  key: String
  description: String
  type: GroupType!
  invites(where: GroupInviteWhereInput, orderBy: GroupInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupInvite!]
  isActive: Boolean!
  members(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  name: String!
  organization: Group
}

enum GROUP_INVITE_STATUS {
  PENDING
  JOINED
}

enum GROUP_ROLE_TYPE {
  ADMIN
  OWNER
  MEMBER
}

"""
A connection to a list of items.
"""
type GroupConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  key: String
  description: String
  isActive: Boolean!
  name: String!
  type: GroupTypeCreateOneWithoutGroupsInput!
  invites: GroupInviteCreateManyWithoutGroupInput
  members: GroupMemberCreateManyWithoutGroupInput
  organization: GroupCreateOneInput
}

input GroupCreateManyWithoutTypeInput {
  create: [GroupCreateWithoutTypeInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutInvitesInput {
  create: GroupCreateWithoutInvitesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutInvitesInput {
  key: String
  description: String
  isActive: Boolean!
  name: String!
  type: GroupTypeCreateOneWithoutGroupsInput!
  members: GroupMemberCreateManyWithoutGroupInput
  organization: GroupCreateOneInput
}

input GroupCreateWithoutMembersInput {
  key: String
  description: String
  isActive: Boolean!
  name: String!
  type: GroupTypeCreateOneWithoutGroupsInput!
  invites: GroupInviteCreateManyWithoutGroupInput
  organization: GroupCreateOneInput
}

input GroupCreateWithoutTypeInput {
  key: String
  description: String
  isActive: Boolean!
  name: String!
  invites: GroupInviteCreateManyWithoutGroupInput
  members: GroupMemberCreateManyWithoutGroupInput
  organization: GroupCreateOneInput
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  The item at the end of the edge.
  """
  node: Group!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type GroupInvite implements Node {
  id: ID!
  email: String!
  group: Group!
  groupRole: GroupRole
  status: GROUP_INVITE_STATUS!
}

"""
A connection to a list of items.
"""
type GroupInviteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GroupInviteEdge]!
  aggregate: AggregateGroupInvite!
}

input GroupInviteCreateInput {
  email: String!
  status: GROUP_INVITE_STATUS!
  group: GroupCreateOneWithoutInvitesInput!
  groupRole: GroupRoleCreateOneInput
}

input GroupInviteCreateManyWithoutGroupInput {
  create: [GroupInviteCreateWithoutGroupInput!]
  connect: [GroupInviteWhereUniqueInput!]
}

input GroupInviteCreateWithoutGroupInput {
  email: String!
  status: GROUP_INVITE_STATUS!
  groupRole: GroupRoleCreateOneInput
}

"""
An edge in a connection.
"""
type GroupInviteEdge {
  """
  The item at the end of the edge.
  """
  node: GroupInvite!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GroupInviteOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupInvitePreviousValues {
  id: ID!
  email: String!
  status: GROUP_INVITE_STATUS!
}

type GroupInviteSubscriptionPayload {
  mutation: MutationType!
  node: GroupInvite
  updatedFields: [String!]
  previousValues: GroupInvitePreviousValues
}

input GroupInviteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupInviteSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupInviteSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupInviteSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupInviteWhereInput
}

input GroupInviteUpdateInput {
  email: String
  status: GROUP_INVITE_STATUS
  group: GroupUpdateOneRequiredWithoutInvitesInput
  groupRole: GroupRoleUpdateOneInput
}

input GroupInviteUpdateManyMutationInput {
  email: String
  status: GROUP_INVITE_STATUS
}

input GroupInviteUpdateManyWithoutGroupInput {
  create: [GroupInviteCreateWithoutGroupInput!]
  connect: [GroupInviteWhereUniqueInput!]
  disconnect: [GroupInviteWhereUniqueInput!]
  delete: [GroupInviteWhereUniqueInput!]
  update: [GroupInviteUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [GroupInviteUpsertWithWhereUniqueWithoutGroupInput!]
}

input GroupInviteUpdateWithoutGroupDataInput {
  email: String
  status: GROUP_INVITE_STATUS
  groupRole: GroupRoleUpdateOneInput
}

input GroupInviteUpdateWithWhereUniqueWithoutGroupInput {
  where: GroupInviteWhereUniqueInput!
  data: GroupInviteUpdateWithoutGroupDataInput!
}

input GroupInviteUpsertWithWhereUniqueWithoutGroupInput {
  where: GroupInviteWhereUniqueInput!
  update: GroupInviteUpdateWithoutGroupDataInput!
  create: GroupInviteCreateWithoutGroupInput!
}

input GroupInviteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupInviteWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupInviteWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupInviteWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  status: GROUP_INVITE_STATUS
  """
  All values that are not equal to given value.
  """
  status_not: GROUP_INVITE_STATUS
  """
  All values that are contained in given list.
  """
  status_in: [GROUP_INVITE_STATUS!]
  """
  All values that are not contained in given list.
  """
  status_not_in: [GROUP_INVITE_STATUS!]
  group: GroupWhereInput
  groupRole: GroupRoleWhereInput
}

input GroupInviteWhereUniqueInput {
  id: ID
}

type GroupMember implements Node {
  id: ID!
  group: Group
  role: GroupRole
  person: Person
}

"""
A connection to a list of items.
"""
type GroupMemberConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GroupMemberEdge]!
  aggregate: AggregateGroupMember!
}

input GroupMemberCreateInput {
  group: GroupCreateOneWithoutMembersInput
  role: GroupRoleCreateOneInput
  person: PersonCreateOneInput
}

input GroupMemberCreateManyWithoutGroupInput {
  create: [GroupMemberCreateWithoutGroupInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateWithoutGroupInput {
  role: GroupRoleCreateOneInput
  person: PersonCreateOneInput
}

"""
An edge in a connection.
"""
type GroupMemberEdge {
  """
  The item at the end of the edge.
  """
  node: GroupMember!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GroupMemberOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupMemberPreviousValues {
  id: ID!
}

type GroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: GroupMember
  updatedFields: [String!]
  previousValues: GroupMemberPreviousValues
}

input GroupMemberSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupMemberSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupMemberSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupMemberSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupMemberWhereInput
}

input GroupMemberUpdateInput {
  group: GroupUpdateOneWithoutMembersInput
  role: GroupRoleUpdateOneInput
  person: PersonUpdateOneInput
}

input GroupMemberUpdateManyWithoutGroupInput {
  create: [GroupMemberCreateWithoutGroupInput!]
  connect: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  delete: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutGroupInput!]
}

input GroupMemberUpdateWithoutGroupDataInput {
  role: GroupRoleUpdateOneInput
  person: PersonUpdateOneInput
}

input GroupMemberUpdateWithWhereUniqueWithoutGroupInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutGroupDataInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutGroupInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutGroupDataInput!
  create: GroupMemberCreateWithoutGroupInput!
}

input GroupMemberWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupMemberWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupMemberWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupMemberWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  group: GroupWhereInput
  role: GroupRoleWhereInput
  person: PersonWhereInput
}

input GroupMemberWhereUniqueInput {
  id: ID
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  key: String
  description: String
  isActive: Boolean!
  name: String!
}

type GroupRole implements Node {
  id: ID!
  canEdit: Boolean!
  canView: Boolean!
  description: String!
  groupType: GroupType
  isLeader: Boolean
  name: String!
  type: GROUP_ROLE_TYPE
}

"""
A connection to a list of items.
"""
type GroupRoleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GroupRoleEdge]!
  aggregate: AggregateGroupRole!
}

input GroupRoleCreateInput {
  canEdit: Boolean!
  canView: Boolean!
  description: String!
  isLeader: Boolean
  name: String!
  type: GROUP_ROLE_TYPE
  groupType: GroupTypeCreateOneWithoutRolesInput
}

input GroupRoleCreateManyWithoutGroupTypeInput {
  create: [GroupRoleCreateWithoutGroupTypeInput!]
  connect: [GroupRoleWhereUniqueInput!]
}

input GroupRoleCreateOneInput {
  create: GroupRoleCreateInput
  connect: GroupRoleWhereUniqueInput
}

input GroupRoleCreateWithoutGroupTypeInput {
  canEdit: Boolean!
  canView: Boolean!
  description: String!
  isLeader: Boolean
  name: String!
  type: GROUP_ROLE_TYPE
}

"""
An edge in a connection.
"""
type GroupRoleEdge {
  """
  The item at the end of the edge.
  """
  node: GroupRole!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GroupRoleOrderByInput {
  id_ASC
  id_DESC
  canEdit_ASC
  canEdit_DESC
  canView_ASC
  canView_DESC
  description_ASC
  description_DESC
  isLeader_ASC
  isLeader_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupRolePreviousValues {
  id: ID!
  canEdit: Boolean!
  canView: Boolean!
  description: String!
  isLeader: Boolean
  name: String!
  type: GROUP_ROLE_TYPE
}

type GroupRoleSubscriptionPayload {
  mutation: MutationType!
  node: GroupRole
  updatedFields: [String!]
  previousValues: GroupRolePreviousValues
}

input GroupRoleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupRoleSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupRoleSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupRoleSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupRoleWhereInput
}

input GroupRoleUpdateDataInput {
  canEdit: Boolean
  canView: Boolean
  description: String
  isLeader: Boolean
  name: String
  type: GROUP_ROLE_TYPE
  groupType: GroupTypeUpdateOneWithoutRolesInput
}

input GroupRoleUpdateInput {
  canEdit: Boolean
  canView: Boolean
  description: String
  isLeader: Boolean
  name: String
  type: GROUP_ROLE_TYPE
  groupType: GroupTypeUpdateOneWithoutRolesInput
}

input GroupRoleUpdateManyMutationInput {
  canEdit: Boolean
  canView: Boolean
  description: String
  isLeader: Boolean
  name: String
  type: GROUP_ROLE_TYPE
}

input GroupRoleUpdateManyWithoutGroupTypeInput {
  create: [GroupRoleCreateWithoutGroupTypeInput!]
  connect: [GroupRoleWhereUniqueInput!]
  disconnect: [GroupRoleWhereUniqueInput!]
  delete: [GroupRoleWhereUniqueInput!]
  update: [GroupRoleUpdateWithWhereUniqueWithoutGroupTypeInput!]
  upsert: [GroupRoleUpsertWithWhereUniqueWithoutGroupTypeInput!]
}

input GroupRoleUpdateOneInput {
  create: GroupRoleCreateInput
  connect: GroupRoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupRoleUpdateDataInput
  upsert: GroupRoleUpsertNestedInput
}

input GroupRoleUpdateWithoutGroupTypeDataInput {
  canEdit: Boolean
  canView: Boolean
  description: String
  isLeader: Boolean
  name: String
  type: GROUP_ROLE_TYPE
}

input GroupRoleUpdateWithWhereUniqueWithoutGroupTypeInput {
  where: GroupRoleWhereUniqueInput!
  data: GroupRoleUpdateWithoutGroupTypeDataInput!
}

input GroupRoleUpsertNestedInput {
  update: GroupRoleUpdateDataInput!
  create: GroupRoleCreateInput!
}

input GroupRoleUpsertWithWhereUniqueWithoutGroupTypeInput {
  where: GroupRoleWhereUniqueInput!
  update: GroupRoleUpdateWithoutGroupTypeDataInput!
  create: GroupRoleCreateWithoutGroupTypeInput!
}

input GroupRoleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupRoleWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupRoleWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupRoleWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  canEdit: Boolean
  """
  All values that are not equal to given value.
  """
  canEdit_not: Boolean
  canView: Boolean
  """
  All values that are not equal to given value.
  """
  canView_not: Boolean
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  isLeader: Boolean
  """
  All values that are not equal to given value.
  """
  isLeader_not: Boolean
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: GROUP_ROLE_TYPE
  """
  All values that are not equal to given value.
  """
  type_not: GROUP_ROLE_TYPE
  """
  All values that are contained in given list.
  """
  type_in: [GROUP_ROLE_TYPE!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [GROUP_ROLE_TYPE!]
  groupType: GroupTypeWhereInput
}

input GroupRoleWhereUniqueInput {
  id: ID
  name: String
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

type GroupType implements Node {
  id: ID!
  description: String
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  name: String!
  roles(where: GroupRoleWhereInput, orderBy: GroupRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupRole!]
}

"""
A connection to a list of items.
"""
type GroupTypeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GroupTypeEdge]!
  aggregate: AggregateGroupType!
}

input GroupTypeCreateInput {
  description: String
  name: String!
  groups: GroupCreateManyWithoutTypeInput
  roles: GroupRoleCreateManyWithoutGroupTypeInput
}

input GroupTypeCreateOneWithoutGroupsInput {
  create: GroupTypeCreateWithoutGroupsInput
  connect: GroupTypeWhereUniqueInput
}

input GroupTypeCreateOneWithoutRolesInput {
  create: GroupTypeCreateWithoutRolesInput
  connect: GroupTypeWhereUniqueInput
}

input GroupTypeCreateWithoutGroupsInput {
  description: String
  name: String!
  roles: GroupRoleCreateManyWithoutGroupTypeInput
}

input GroupTypeCreateWithoutRolesInput {
  description: String
  name: String!
  groups: GroupCreateManyWithoutTypeInput
}

"""
An edge in a connection.
"""
type GroupTypeEdge {
  """
  The item at the end of the edge.
  """
  node: GroupType!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GroupTypeOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupTypePreviousValues {
  id: ID!
  description: String
  name: String!
}

type GroupTypeSubscriptionPayload {
  mutation: MutationType!
  node: GroupType
  updatedFields: [String!]
  previousValues: GroupTypePreviousValues
}

input GroupTypeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupTypeSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupTypeSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupTypeSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupTypeWhereInput
}

input GroupTypeUpdateInput {
  description: String
  name: String
  groups: GroupUpdateManyWithoutTypeInput
  roles: GroupRoleUpdateManyWithoutGroupTypeInput
}

input GroupTypeUpdateManyMutationInput {
  description: String
  name: String
}

input GroupTypeUpdateOneRequiredWithoutGroupsInput {
  create: GroupTypeCreateWithoutGroupsInput
  connect: GroupTypeWhereUniqueInput
  update: GroupTypeUpdateWithoutGroupsDataInput
  upsert: GroupTypeUpsertWithoutGroupsInput
}

input GroupTypeUpdateOneWithoutRolesInput {
  create: GroupTypeCreateWithoutRolesInput
  connect: GroupTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupTypeUpdateWithoutRolesDataInput
  upsert: GroupTypeUpsertWithoutRolesInput
}

input GroupTypeUpdateWithoutGroupsDataInput {
  description: String
  name: String
  roles: GroupRoleUpdateManyWithoutGroupTypeInput
}

input GroupTypeUpdateWithoutRolesDataInput {
  description: String
  name: String
  groups: GroupUpdateManyWithoutTypeInput
}

input GroupTypeUpsertWithoutGroupsInput {
  update: GroupTypeUpdateWithoutGroupsDataInput!
  create: GroupTypeCreateWithoutGroupsInput!
}

input GroupTypeUpsertWithoutRolesInput {
  update: GroupTypeUpdateWithoutRolesDataInput!
  create: GroupTypeCreateWithoutRolesInput!
}

input GroupTypeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupTypeWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupTypeWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupTypeWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  roles_every: GroupRoleWhereInput
  roles_some: GroupRoleWhereInput
  roles_none: GroupRoleWhereInput
}

input GroupTypeWhereUniqueInput {
  id: ID
  name: String
}

input GroupUpdateDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  type: GroupTypeUpdateOneRequiredWithoutGroupsInput
  invites: GroupInviteUpdateManyWithoutGroupInput
  members: GroupMemberUpdateManyWithoutGroupInput
  organization: GroupUpdateOneInput
}

input GroupUpdateInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  type: GroupTypeUpdateOneRequiredWithoutGroupsInput
  invites: GroupInviteUpdateManyWithoutGroupInput
  members: GroupMemberUpdateManyWithoutGroupInput
  organization: GroupUpdateOneInput
}

input GroupUpdateManyMutationInput {
  key: String
  description: String
  isActive: Boolean
  name: String
}

input GroupUpdateManyWithoutTypeInput {
  create: [GroupCreateWithoutTypeInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutTypeInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutTypeInput!]
}

input GroupUpdateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateDataInput
  upsert: GroupUpsertNestedInput
}

input GroupUpdateOneRequiredInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateDataInput
  upsert: GroupUpsertNestedInput
}

input GroupUpdateOneRequiredWithoutInvitesInput {
  create: GroupCreateWithoutInvitesInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutInvitesDataInput
  upsert: GroupUpsertWithoutInvitesInput
}

input GroupUpdateOneWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutMembersDataInput
  upsert: GroupUpsertWithoutMembersInput
}

input GroupUpdateWithoutInvitesDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  type: GroupTypeUpdateOneRequiredWithoutGroupsInput
  members: GroupMemberUpdateManyWithoutGroupInput
  organization: GroupUpdateOneInput
}

input GroupUpdateWithoutMembersDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  type: GroupTypeUpdateOneRequiredWithoutGroupsInput
  invites: GroupInviteUpdateManyWithoutGroupInput
  organization: GroupUpdateOneInput
}

input GroupUpdateWithoutTypeDataInput {
  key: String
  description: String
  isActive: Boolean
  name: String
  invites: GroupInviteUpdateManyWithoutGroupInput
  members: GroupMemberUpdateManyWithoutGroupInput
  organization: GroupUpdateOneInput
}

input GroupUpdateWithWhereUniqueWithoutTypeInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutTypeDataInput!
}

input GroupUpsertNestedInput {
  update: GroupUpdateDataInput!
  create: GroupCreateInput!
}

input GroupUpsertWithoutInvitesInput {
  update: GroupUpdateWithoutInvitesDataInput!
  create: GroupCreateWithoutInvitesInput!
}

input GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupUpsertWithWhereUniqueWithoutTypeInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutTypeDataInput!
  create: GroupCreateWithoutTypeInput!
}

input GroupWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GroupWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GroupWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [GroupWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  key: String
  """
  All values that are not equal to given value.
  """
  key_not: String
  """
  All values that are contained in given list.
  """
  key_in: [String!]
  """
  All values that are not contained in given list.
  """
  key_not_in: [String!]
  """
  All values less than the given value.
  """
  key_lt: String
  """
  All values less than or equal the given value.
  """
  key_lte: String
  """
  All values greater than the given value.
  """
  key_gt: String
  """
  All values greater than or equal the given value.
  """
  key_gte: String
  """
  All values containing the given string.
  """
  key_contains: String
  """
  All values not containing the given string.
  """
  key_not_contains: String
  """
  All values starting with the given string.
  """
  key_starts_with: String
  """
  All values not starting with the given string.
  """
  key_not_starts_with: String
  """
  All values ending with the given string.
  """
  key_ends_with: String
  """
  All values not ending with the given string.
  """
  key_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  isActive: Boolean
  """
  All values that are not equal to given value.
  """
  isActive_not: Boolean
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: GroupTypeWhereInput
  invites_every: GroupInviteWhereInput
  invites_some: GroupInviteWhereInput
  invites_none: GroupInviteWhereInput
  members_every: GroupMemberWhereInput
  members_some: GroupMemberWhereInput
  members_none: GroupMemberWhereInput
  organization: GroupWhereInput
}

input GroupWhereUniqueInput {
  id: ID
  key: String
}

"""
Raw JSON value
"""
scalar Json

type Location implements Node {
  id: ID!
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

enum LOCATION_TYPE {
  HOME
  WORK
}

"""
A connection to a list of items.
"""
type LocationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

"""
An edge in a connection.
"""
type LocationEdge {
  """
  The item at the end of the edge.
  """
  node: Location!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  locationType_ASC
  locationType_DESC
  postalCode_ASC
  postalCode_DESC
  state_ASC
  state_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LocationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LocationSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LocationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

input LocationUpdateInput {
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

input LocationUpdateManyMutationInput {
  city: String
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LocationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LocationWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LocationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  city: String
  """
  All values that are not equal to given value.
  """
  city_not: String
  """
  All values that are contained in given list.
  """
  city_in: [String!]
  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]
  """
  All values less than the given value.
  """
  city_lt: String
  """
  All values less than or equal the given value.
  """
  city_lte: String
  """
  All values greater than the given value.
  """
  city_gt: String
  """
  All values greater than or equal the given value.
  """
  city_gte: String
  """
  All values containing the given string.
  """
  city_contains: String
  """
  All values not containing the given string.
  """
  city_not_contains: String
  """
  All values starting with the given string.
  """
  city_starts_with: String
  """
  All values not starting with the given string.
  """
  city_not_starts_with: String
  """
  All values ending with the given string.
  """
  city_ends_with: String
  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  locationType: LOCATION_TYPE
  """
  All values that are not equal to given value.
  """
  locationType_not: LOCATION_TYPE
  """
  All values that are contained in given list.
  """
  locationType_in: [LOCATION_TYPE!]
  """
  All values that are not contained in given list.
  """
  locationType_not_in: [LOCATION_TYPE!]
  postalCode: String
  """
  All values that are not equal to given value.
  """
  postalCode_not: String
  """
  All values that are contained in given list.
  """
  postalCode_in: [String!]
  """
  All values that are not contained in given list.
  """
  postalCode_not_in: [String!]
  """
  All values less than the given value.
  """
  postalCode_lt: String
  """
  All values less than or equal the given value.
  """
  postalCode_lte: String
  """
  All values greater than the given value.
  """
  postalCode_gt: String
  """
  All values greater than or equal the given value.
  """
  postalCode_gte: String
  """
  All values containing the given string.
  """
  postalCode_contains: String
  """
  All values not containing the given string.
  """
  postalCode_not_contains: String
  """
  All values starting with the given string.
  """
  postalCode_starts_with: String
  """
  All values not starting with the given string.
  """
  postalCode_not_starts_with: String
  """
  All values ending with the given string.
  """
  postalCode_ends_with: String
  """
  All values not ending with the given string.
  """
  postalCode_not_ends_with: String
  state: String
  """
  All values that are not equal to given value.
  """
  state_not: String
  """
  All values that are contained in given list.
  """
  state_in: [String!]
  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]
  """
  All values less than the given value.
  """
  state_lt: String
  """
  All values less than or equal the given value.
  """
  state_lte: String
  """
  All values greater than the given value.
  """
  state_gt: String
  """
  All values greater than or equal the given value.
  """
  state_gte: String
  """
  All values containing the given string.
  """
  state_contains: String
  """
  All values not containing the given string.
  """
  state_not_contains: String
  """
  All values starting with the given string.
  """
  state_starts_with: String
  """
  All values not starting with the given string.
  """
  state_not_starts_with: String
  """
  All values ending with the given string.
  """
  state_ends_with: String
  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  street1: String
  """
  All values that are not equal to given value.
  """
  street1_not: String
  """
  All values that are contained in given list.
  """
  street1_in: [String!]
  """
  All values that are not contained in given list.
  """
  street1_not_in: [String!]
  """
  All values less than the given value.
  """
  street1_lt: String
  """
  All values less than or equal the given value.
  """
  street1_lte: String
  """
  All values greater than the given value.
  """
  street1_gt: String
  """
  All values greater than or equal the given value.
  """
  street1_gte: String
  """
  All values containing the given string.
  """
  street1_contains: String
  """
  All values not containing the given string.
  """
  street1_not_contains: String
  """
  All values starting with the given string.
  """
  street1_starts_with: String
  """
  All values not starting with the given string.
  """
  street1_not_starts_with: String
  """
  All values ending with the given string.
  """
  street1_ends_with: String
  """
  All values not ending with the given string.
  """
  street1_not_ends_with: String
  street2: String
  """
  All values that are not equal to given value.
  """
  street2_not: String
  """
  All values that are contained in given list.
  """
  street2_in: [String!]
  """
  All values that are not contained in given list.
  """
  street2_not_in: [String!]
  """
  All values less than the given value.
  """
  street2_lt: String
  """
  All values less than or equal the given value.
  """
  street2_lte: String
  """
  All values greater than the given value.
  """
  street2_gt: String
  """
  All values greater than or equal the given value.
  """
  street2_gte: String
  """
  All values containing the given string.
  """
  street2_contains: String
  """
  All values not containing the given string.
  """
  street2_not_contains: String
  """
  All values starting with the given string.
  """
  street2_starts_with: String
  """
  All values not starting with the given string.
  """
  street2_not_starts_with: String
  """
  All values ending with the given string.
  """
  street2_ends_with: String
  """
  All values not ending with the given string.
  """
  street2_not_ends_with: String
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createFinancialScheduledTransaction(data: FinancialScheduledTransactionCreateInput!): FinancialScheduledTransaction!
  createFinancialTransaction(data: FinancialTransactionCreateInput!): FinancialTransaction!
  createGroupInvite(data: GroupInviteCreateInput!): GroupInvite!
  createGroupMember(data: GroupMemberCreateInput!): GroupMember!
  createGroupType(data: GroupTypeCreateInput!): GroupType!
  createCampus(data: CampusCreateInput!): Campus!
  createFinancialAccount(data: FinancialAccountCreateInput!): FinancialAccount!
  createGroup(data: GroupCreateInput!): Group!
  createPerson(data: PersonCreateInput!): Person!
  createGroupRole(data: GroupRoleCreateInput!): GroupRole!
  createLocation(data: LocationCreateInput!): Location!
  createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber!
  createFinancialPaymentDetail(data: FinancialPaymentDetailCreateInput!): FinancialPaymentDetail!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFinancialScheduledTransaction(data: FinancialScheduledTransactionUpdateInput!, where: FinancialScheduledTransactionWhereUniqueInput!): FinancialScheduledTransaction
  updateFinancialTransaction(data: FinancialTransactionUpdateInput!, where: FinancialTransactionWhereUniqueInput!): FinancialTransaction
  updateGroupInvite(data: GroupInviteUpdateInput!, where: GroupInviteWhereUniqueInput!): GroupInvite
  updateGroupMember(data: GroupMemberUpdateInput!, where: GroupMemberWhereUniqueInput!): GroupMember
  updateGroupType(data: GroupTypeUpdateInput!, where: GroupTypeWhereUniqueInput!): GroupType
  updateCampus(data: CampusUpdateInput!, where: CampusWhereUniqueInput!): Campus
  updateFinancialAccount(data: FinancialAccountUpdateInput!, where: FinancialAccountWhereUniqueInput!): FinancialAccount
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateGroupRole(data: GroupRoleUpdateInput!, where: GroupRoleWhereUniqueInput!): GroupRole
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updatePhoneNumber(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereUniqueInput!): PhoneNumber
  updateFinancialPaymentDetail(data: FinancialPaymentDetailUpdateInput!, where: FinancialPaymentDetailWhereUniqueInput!): FinancialPaymentDetail
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFinancialScheduledTransaction(where: FinancialScheduledTransactionWhereUniqueInput!): FinancialScheduledTransaction
  deleteFinancialTransaction(where: FinancialTransactionWhereUniqueInput!): FinancialTransaction
  deleteGroupInvite(where: GroupInviteWhereUniqueInput!): GroupInvite
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupType(where: GroupTypeWhereUniqueInput!): GroupType
  deleteCampus(where: CampusWhereUniqueInput!): Campus
  deleteFinancialAccount(where: FinancialAccountWhereUniqueInput!): FinancialAccount
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteGroupRole(where: GroupRoleWhereUniqueInput!): GroupRole
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  deleteFinancialPaymentDetail(where: FinancialPaymentDetailWhereUniqueInput!): FinancialPaymentDetail
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFinancialScheduledTransaction(where: FinancialScheduledTransactionWhereUniqueInput!, create: FinancialScheduledTransactionCreateInput!, update: FinancialScheduledTransactionUpdateInput!): FinancialScheduledTransaction!
  upsertFinancialTransaction(where: FinancialTransactionWhereUniqueInput!, create: FinancialTransactionCreateInput!, update: FinancialTransactionUpdateInput!): FinancialTransaction!
  upsertGroupInvite(where: GroupInviteWhereUniqueInput!, create: GroupInviteCreateInput!, update: GroupInviteUpdateInput!): GroupInvite!
  upsertGroupMember(where: GroupMemberWhereUniqueInput!, create: GroupMemberCreateInput!, update: GroupMemberUpdateInput!): GroupMember!
  upsertGroupType(where: GroupTypeWhereUniqueInput!, create: GroupTypeCreateInput!, update: GroupTypeUpdateInput!): GroupType!
  upsertCampus(where: CampusWhereUniqueInput!, create: CampusCreateInput!, update: CampusUpdateInput!): Campus!
  upsertFinancialAccount(where: FinancialAccountWhereUniqueInput!, create: FinancialAccountCreateInput!, update: FinancialAccountUpdateInput!): FinancialAccount!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertGroupRole(where: GroupRoleWhereUniqueInput!, create: GroupRoleCreateInput!, update: GroupRoleUpdateInput!): GroupRole!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertPhoneNumber(where: PhoneNumberWhereUniqueInput!, create: PhoneNumberCreateInput!, update: PhoneNumberUpdateInput!): PhoneNumber!
  upsertFinancialPaymentDetail(where: FinancialPaymentDetailWhereUniqueInput!, create: FinancialPaymentDetailCreateInput!, update: FinancialPaymentDetailUpdateInput!): FinancialPaymentDetail!
  updateManyFinancialScheduledTransactions(data: FinancialScheduledTransactionUpdateManyMutationInput!, where: FinancialScheduledTransactionWhereInput): BatchPayload!
  updateManyFinancialTransactions(data: FinancialTransactionUpdateManyMutationInput!, where: FinancialTransactionWhereInput): BatchPayload!
  updateManyGroupInvites(data: GroupInviteUpdateManyMutationInput!, where: GroupInviteWhereInput): BatchPayload!
  updateManyGroupTypes(data: GroupTypeUpdateManyMutationInput!, where: GroupTypeWhereInput): BatchPayload!
  updateManyCampuses(data: CampusUpdateManyMutationInput!, where: CampusWhereInput): BatchPayload!
  updateManyFinancialAccounts(data: FinancialAccountUpdateManyMutationInput!, where: FinancialAccountWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  updateManyGroupRoles(data: GroupRoleUpdateManyMutationInput!, where: GroupRoleWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyPhoneNumbers(data: PhoneNumberUpdateManyMutationInput!, where: PhoneNumberWhereInput): BatchPayload!
  updateManyFinancialPaymentDetails(data: FinancialPaymentDetailUpdateManyMutationInput!, where: FinancialPaymentDetailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFinancialScheduledTransactions(where: FinancialScheduledTransactionWhereInput): BatchPayload!
  deleteManyFinancialTransactions(where: FinancialTransactionWhereInput): BatchPayload!
  deleteManyGroupInvites(where: GroupInviteWhereInput): BatchPayload!
  deleteManyGroupMembers(where: GroupMemberWhereInput): BatchPayload!
  deleteManyGroupTypes(where: GroupTypeWhereInput): BatchPayload!
  deleteManyCampuses(where: CampusWhereInput): BatchPayload!
  deleteManyFinancialAccounts(where: FinancialAccountWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyGroupRoles(where: GroupRoleWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyPhoneNumbers(where: PhoneNumberWhereInput): BatchPayload!
  deleteManyFinancialPaymentDetails(where: FinancialPaymentDetailWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Person implements Node {
  id: ID!
  email: String
  firstName: String
  lastName: String
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber!]
  scheduledTransactions(where: FinancialScheduledTransactionWhereInput, orderBy: FinancialScheduledTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialScheduledTransaction!]
  transactions(where: FinancialTransactionWhereInput, orderBy: FinancialTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialTransaction!]
  user: User
}

"""
A connection to a list of items.
"""
type PersonConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberCreateManyInput
  scheduledTransactions: FinancialScheduledTransactionCreateManyWithoutPersonInput
  transactions: FinancialTransactionCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutScheduledTransactionsInput {
  create: PersonCreateWithoutScheduledTransactionsInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutTransactionsInput {
  create: PersonCreateWithoutTransactionsInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutScheduledTransactionsInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberCreateManyInput
  transactions: FinancialTransactionCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateWithoutTransactionsInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberCreateManyInput
  scheduledTransactions: FinancialScheduledTransactionCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateWithoutUserInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberCreateManyInput
  scheduledTransactions: FinancialScheduledTransactionCreateManyWithoutPersonInput
  transactions: FinancialTransactionCreateManyWithoutPersonInput
}

"""
An edge in a connection.
"""
type PersonEdge {
  """
  The item at the end of the edge.
  """
  node: Person!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  email: String
  firstName: String
  lastName: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PersonSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PersonSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PersonSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateDataInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberUpdateManyInput
  scheduledTransactions: FinancialScheduledTransactionUpdateManyWithoutPersonInput
  transactions: FinancialTransactionUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberUpdateManyInput
  scheduledTransactions: FinancialScheduledTransactionUpdateManyWithoutPersonInput
  transactions: FinancialTransactionUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
}

input PersonUpdateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
}

input PersonUpdateOneRequiredWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateOneWithoutScheduledTransactionsInput {
  create: PersonCreateWithoutScheduledTransactionsInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutScheduledTransactionsDataInput
  upsert: PersonUpsertWithoutScheduledTransactionsInput
}

input PersonUpdateOneWithoutTransactionsInput {
  create: PersonCreateWithoutTransactionsInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutTransactionsDataInput
  upsert: PersonUpsertWithoutTransactionsInput
}

input PersonUpdateWithoutScheduledTransactionsDataInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberUpdateManyInput
  transactions: FinancialTransactionUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateWithoutTransactionsDataInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberUpdateManyInput
  scheduledTransactions: FinancialScheduledTransactionUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateWithoutUserDataInput {
  email: String
  firstName: String
  lastName: String
  phoneNumbers: PhoneNumberUpdateManyInput
  scheduledTransactions: FinancialScheduledTransactionUpdateManyWithoutPersonInput
  transactions: FinancialTransactionUpdateManyWithoutPersonInput
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonUpsertWithoutScheduledTransactionsInput {
  update: PersonUpdateWithoutScheduledTransactionsDataInput!
  create: PersonCreateWithoutScheduledTransactionsInput!
}

input PersonUpsertWithoutTransactionsInput {
  update: PersonUpdateWithoutTransactionsDataInput!
  create: PersonCreateWithoutTransactionsInput!
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput!
  create: PersonCreateWithoutUserInput!
}

input PersonWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PersonWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PersonWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PersonWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  firstName: String
  """
  All values that are not equal to given value.
  """
  firstName_not: String
  """
  All values that are contained in given list.
  """
  firstName_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]
  """
  All values less than the given value.
  """
  firstName_lt: String
  """
  All values less than or equal the given value.
  """
  firstName_lte: String
  """
  All values greater than the given value.
  """
  firstName_gt: String
  """
  All values greater than or equal the given value.
  """
  firstName_gte: String
  """
  All values containing the given string.
  """
  firstName_contains: String
  """
  All values not containing the given string.
  """
  firstName_not_contains: String
  """
  All values starting with the given string.
  """
  firstName_starts_with: String
  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstName_ends_with: String
  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String
  """
  All values that are not equal to given value.
  """
  lastName_not: String
  """
  All values that are contained in given list.
  """
  lastName_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]
  """
  All values less than the given value.
  """
  lastName_lt: String
  """
  All values less than or equal the given value.
  """
  lastName_lte: String
  """
  All values greater than the given value.
  """
  lastName_gt: String
  """
  All values greater than or equal the given value.
  """
  lastName_gte: String
  """
  All values containing the given string.
  """
  lastName_contains: String
  """
  All values not containing the given string.
  """
  lastName_not_contains: String
  """
  All values starting with the given string.
  """
  lastName_starts_with: String
  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastName_ends_with: String
  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  phoneNumbers_every: PhoneNumberWhereInput
  phoneNumbers_some: PhoneNumberWhereInput
  phoneNumbers_none: PhoneNumberWhereInput
  scheduledTransactions_every: FinancialScheduledTransactionWhereInput
  scheduledTransactions_some: FinancialScheduledTransactionWhereInput
  scheduledTransactions_none: FinancialScheduledTransactionWhereInput
  transactions_every: FinancialTransactionWhereInput
  transactions_some: FinancialTransactionWhereInput
  transactions_none: FinancialTransactionWhereInput
  user: UserWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type PhoneNumber implements Node {
  id: ID!
  number: String!
}

"""
A connection to a list of items.
"""
type PhoneNumberConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PhoneNumberEdge]!
  aggregate: AggregatePhoneNumber!
}

input PhoneNumberCreateInput {
  number: String!
}

input PhoneNumberCreateManyInput {
  create: [PhoneNumberCreateInput!]
  connect: [PhoneNumberWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type PhoneNumberEdge {
  """
  The item at the end of the edge.
  """
  node: PhoneNumber!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PhoneNumberOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhoneNumberPreviousValues {
  id: ID!
  number: String!
}

type PhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: PhoneNumber
  updatedFields: [String!]
  previousValues: PhoneNumberPreviousValues
}

input PhoneNumberSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhoneNumberSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PhoneNumberSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhoneNumberSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhoneNumberWhereInput
}

input PhoneNumberUpdateDataInput {
  number: String
}

input PhoneNumberUpdateInput {
  number: String
}

input PhoneNumberUpdateManyInput {
  create: [PhoneNumberCreateInput!]
  connect: [PhoneNumberWhereUniqueInput!]
  disconnect: [PhoneNumberWhereUniqueInput!]
  delete: [PhoneNumberWhereUniqueInput!]
  update: [PhoneNumberUpdateWithWhereUniqueNestedInput!]
  upsert: [PhoneNumberUpsertWithWhereUniqueNestedInput!]
}

input PhoneNumberUpdateManyMutationInput {
  number: String
}

input PhoneNumberUpdateWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput!
  data: PhoneNumberUpdateDataInput!
}

input PhoneNumberUpsertWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput!
  update: PhoneNumberUpdateDataInput!
  create: PhoneNumberCreateInput!
}

input PhoneNumberWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhoneNumberWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PhoneNumberWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhoneNumberWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  number: String
  """
  All values that are not equal to given value.
  """
  number_not: String
  """
  All values that are contained in given list.
  """
  number_in: [String!]
  """
  All values that are not contained in given list.
  """
  number_not_in: [String!]
  """
  All values less than the given value.
  """
  number_lt: String
  """
  All values less than or equal the given value.
  """
  number_lte: String
  """
  All values greater than the given value.
  """
  number_gt: String
  """
  All values greater than or equal the given value.
  """
  number_gte: String
  """
  All values containing the given string.
  """
  number_contains: String
  """
  All values not containing the given string.
  """
  number_not_contains: String
  """
  All values starting with the given string.
  """
  number_starts_with: String
  """
  All values not starting with the given string.
  """
  number_not_starts_with: String
  """
  All values ending with the given string.
  """
  number_ends_with: String
  """
  All values not ending with the given string.
  """
  number_not_ends_with: String
}

input PhoneNumberWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  financialScheduledTransactions(where: FinancialScheduledTransactionWhereInput, orderBy: FinancialScheduledTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialScheduledTransaction]!
  financialTransactions(where: FinancialTransactionWhereInput, orderBy: FinancialTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialTransaction]!
  groupInvites(where: GroupInviteWhereInput, orderBy: GroupInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupInvite]!
  groupMembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember]!
  groupTypes(where: GroupTypeWhereInput, orderBy: GroupTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupType]!
  campuses(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campus]!
  financialAccounts(where: FinancialAccountWhereInput, orderBy: FinancialAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialAccount]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  groupRoles(where: GroupRoleWhereInput, orderBy: GroupRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupRole]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber]!
  financialPaymentDetails(where: FinancialPaymentDetailWhereInput, orderBy: FinancialPaymentDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialPaymentDetail]!
  user(where: UserWhereUniqueInput!): User
  financialScheduledTransaction(where: FinancialScheduledTransactionWhereUniqueInput!): FinancialScheduledTransaction
  financialTransaction(where: FinancialTransactionWhereUniqueInput!): FinancialTransaction
  groupInvite(where: GroupInviteWhereUniqueInput!): GroupInvite
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupType(where: GroupTypeWhereUniqueInput!): GroupType
  campus(where: CampusWhereUniqueInput!): Campus
  financialAccount(where: FinancialAccountWhereUniqueInput!): FinancialAccount
  group(where: GroupWhereUniqueInput!): Group
  person(where: PersonWhereUniqueInput!): Person
  groupRole(where: GroupRoleWhereUniqueInput!): GroupRole
  location(where: LocationWhereUniqueInput!): Location
  phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  financialPaymentDetail(where: FinancialPaymentDetailWhereUniqueInput!): FinancialPaymentDetail
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  financialScheduledTransactionsConnection(where: FinancialScheduledTransactionWhereInput, orderBy: FinancialScheduledTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialScheduledTransactionConnection!
  financialTransactionsConnection(where: FinancialTransactionWhereInput, orderBy: FinancialTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialTransactionConnection!
  groupInvitesConnection(where: GroupInviteWhereInput, orderBy: GroupInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupInviteConnection!
  groupMembersConnection(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupMemberConnection!
  groupTypesConnection(where: GroupTypeWhereInput, orderBy: GroupTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupTypeConnection!
  campusesConnection(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampusConnection!
  financialAccountsConnection(where: FinancialAccountWhereInput, orderBy: FinancialAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialAccountConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  groupRolesConnection(where: GroupRoleWhereInput, orderBy: GroupRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupRoleConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  phoneNumbersConnection(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhoneNumberConnection!
  financialPaymentDetailsConnection(where: FinancialPaymentDetailWhereInput, orderBy: FinancialPaymentDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialPaymentDetailConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  financialScheduledTransaction(where: FinancialScheduledTransactionSubscriptionWhereInput): FinancialScheduledTransactionSubscriptionPayload
  financialTransaction(where: FinancialTransactionSubscriptionWhereInput): FinancialTransactionSubscriptionPayload
  groupInvite(where: GroupInviteSubscriptionWhereInput): GroupInviteSubscriptionPayload
  groupMember(where: GroupMemberSubscriptionWhereInput): GroupMemberSubscriptionPayload
  groupType(where: GroupTypeSubscriptionWhereInput): GroupTypeSubscriptionPayload
  campus(where: CampusSubscriptionWhereInput): CampusSubscriptionPayload
  financialAccount(where: FinancialAccountSubscriptionWhereInput): FinancialAccountSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  groupRole(where: GroupRoleSubscriptionWhereInput): GroupRoleSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  phoneNumber(where: PhoneNumberSubscriptionWhereInput): PhoneNumberSubscriptionPayload
  financialPaymentDetail(where: FinancialPaymentDetailSubscriptionWhereInput): FinancialPaymentDetailSubscriptionPayload
}

enum TRANSACTION_FREQUENCY {
  DAILY
  MONTHLY
  BIWEEKLY
  CUSTOM
}

enum TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
}

type User implements Node {
  id: ID!
  person: Person!
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  person: PersonCreateOneWithoutUserInput!
}

input UserCreateOneWithoutPersonInput {
  connect: UserWhereUniqueInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  person: PersonUpdateOneRequiredWithoutUserInput
}

input UserUpdateOneWithoutPersonInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  person: PersonWhereInput
}

input UserWhereUniqueInput {
  id: ID
}


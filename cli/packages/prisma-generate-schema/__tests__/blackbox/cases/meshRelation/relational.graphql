type A {
  field: Int!
  a: A!
  b(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B!]
  c: C
  e(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [E!]
}

"""
A connection to a list of items.
"""
type AConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AEdge]!
  aggregate: AggregateA!
}

input ACreateInput {
  field: Int!
  a: ACreateOneInput!
  b: BCreateManyWithoutAInput
  c: CCreateOneWithoutAInput
  e: ECreateManyWithoutAInput
}

input ACreateOneInput {
  create: ACreateInput
}

input ACreateOneWithoutBInput {
  create: ACreateWithoutBInput
}

input ACreateOneWithoutCInput {
  create: ACreateWithoutCInput
}

input ACreateOneWithoutEInput {
  create: ACreateWithoutEInput
}

input ACreateWithoutBInput {
  field: Int!
  a: ACreateOneInput!
  c: CCreateOneWithoutAInput
  e: ECreateManyWithoutAInput
}

input ACreateWithoutCInput {
  field: Int!
  a: ACreateOneInput!
  b: BCreateManyWithoutAInput
  e: ECreateManyWithoutAInput
}

input ACreateWithoutEInput {
  field: Int!
  a: ACreateOneInput!
  b: BCreateManyWithoutAInput
  c: CCreateOneWithoutAInput
}

"""
An edge in a connection.
"""
type AEdge {
  """
  The item at the end of the edge.
  """
  node: A!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type AggregateA {
  count: Int!
}

type AggregateB {
  count: Int!
}

type AggregateC {
  count: Int!
}

type AggregateD {
  count: Int!
}

type AggregateE {
  count: Int!
}

enum AOrderByInput {
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type APreviousValues {
  field: Int!
}

type ASubscriptionPayload {
  mutation: MutationType!
  node: A
  updatedFields: [String!]
  previousValues: APreviousValues
}

input ASubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ASubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ASubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ASubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AWhereInput
}

input AUpdateManyMutationInput {
  field: Int
}

input AWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [AWhereInput!]
  field: Int
  """
  All values that are not equal to given value.
  """
  field_not: Int
  """
  All values that are contained in given list.
  """
  field_in: [Int!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [Int!]
  """
  All values less than the given value.
  """
  field_lt: Int
  """
  All values less than or equal the given value.
  """
  field_lte: Int
  """
  All values greater than the given value.
  """
  field_gt: Int
  """
  All values greater than or equal the given value.
  """
  field_gte: Int
  a: AWhereInput
  b_every: BWhereInput
  b_some: BWhereInput
  b_none: BWhereInput
  c: CWhereInput
  e_every: EWhereInput
  e_some: EWhereInput
  e_none: EWhereInput
}

type B {
  field: [String!]!
  c: C
  b(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B!]
  a: A!
  c2: C
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type BConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [BEdge]!
  aggregate: AggregateB!
}

input BCreatefieldInput {
  set: [String!]
}

input BCreateInput {
  field: BCreatefieldInput
  c: CCreateOneWithoutBInput
  b: BCreateManyInput
  a: ACreateOneWithoutBInput!
  c2: CCreateOneWithoutB2Input
}

input BCreateManyInput {
  create: [BCreateInput!]
}

input BCreateManyWithoutAInput {
  create: [BCreateWithoutAInput!]
}

input BCreateManyWithoutCInput {
  create: [BCreateWithoutCInput!]
}

input BCreateOneInput {
  create: BCreateInput
}

input BCreateOneWithoutC2Input {
  create: BCreateWithoutC2Input
}

input BCreateWithoutAInput {
  field: BCreatefieldInput
  c: CCreateOneWithoutBInput
  b: BCreateManyInput
  c2: CCreateOneWithoutB2Input
}

input BCreateWithoutC2Input {
  field: BCreatefieldInput
  c: CCreateOneWithoutBInput
  b: BCreateManyInput
  a: ACreateOneWithoutBInput!
}

input BCreateWithoutCInput {
  field: BCreatefieldInput
  b: BCreateManyInput
  a: ACreateOneWithoutBInput!
  c2: CCreateOneWithoutB2Input
}

"""
An edge in a connection.
"""
type BEdge {
  """
  The item at the end of the edge.
  """
  node: B!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BPreviousValues {
  field: [String!]!
}

type BSubscriptionPayload {
  mutation: MutationType!
  node: B
  updatedFields: [String!]
  previousValues: BPreviousValues
}

input BSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [BSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BWhereInput
}

input BUpdatefieldInput {
  set: [String!]
}

input BUpdateManyMutationInput {
  field: BUpdatefieldInput
}

input BWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [BWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BWhereInput!]
  c: CWhereInput
  b_every: BWhereInput
  b_some: BWhereInput
  b_none: BWhereInput
  a: AWhereInput
  c2: CWhereInput
}

type C {
  expirationDate: DateTime
  c: C!
  b(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B!]
  a: A
  b2: B
}

"""
A connection to a list of items.
"""
type CConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CEdge]!
  aggregate: AggregateC!
}

input CCreateInput {
  expirationDate: DateTime
  c: CCreateOneInput!
  b: BCreateManyWithoutCInput
  a: ACreateOneWithoutCInput
  b2: BCreateOneWithoutC2Input
}

input CCreateOneInput {
  create: CCreateInput
}

input CCreateOneWithoutAInput {
  create: CCreateWithoutAInput
}

input CCreateOneWithoutB2Input {
  create: CCreateWithoutB2Input
}

input CCreateOneWithoutBInput {
  create: CCreateWithoutBInput
}

input CCreateWithoutAInput {
  expirationDate: DateTime
  c: CCreateOneInput!
  b: BCreateManyWithoutCInput
  b2: BCreateOneWithoutC2Input
}

input CCreateWithoutB2Input {
  expirationDate: DateTime
  c: CCreateOneInput!
  b: BCreateManyWithoutCInput
  a: ACreateOneWithoutCInput
}

input CCreateWithoutBInput {
  expirationDate: DateTime
  c: CCreateOneInput!
  a: ACreateOneWithoutCInput
  b2: BCreateOneWithoutC2Input
}

"""
An edge in a connection.
"""
type CEdge {
  """
  The item at the end of the edge.
  """
  node: C!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum COrderByInput {
  expirationDate_ASC
  expirationDate_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CPreviousValues {
  expirationDate: DateTime
}

type CSubscriptionPayload {
  mutation: MutationType!
  node: C
  updatedFields: [String!]
  previousValues: CPreviousValues
}

input CSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CWhereInput
}

input CUpdateManyMutationInput {
  expirationDate: DateTime
}

input CWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CWhereInput!]
  expirationDate: DateTime
  """
  All values that are not equal to given value.
  """
  expirationDate_not: DateTime
  """
  All values that are contained in given list.
  """
  expirationDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  expirationDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  expirationDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  expirationDate_lte: DateTime
  """
  All values greater than the given value.
  """
  expirationDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  expirationDate_gte: DateTime
  c: CWhereInput
  b_every: BWhereInput
  b_some: BWhereInput
  b_none: BWhereInput
  a: AWhereInput
  b2: BWhereInput
}

type D {
  field: Json
  c: C!
  b: B!
  a: A!
  d(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [D!]
}

scalar DateTime

"""
A connection to a list of items.
"""
type DConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DEdge]!
  aggregate: AggregateD!
}

input DCreateInput {
  field: Json
  c: CCreateOneInput!
  b: BCreateOneInput!
  a: ACreateOneInput!
  d: DCreateManyInput
}

input DCreateManyInput {
  create: [DCreateInput!]
}

"""
An edge in a connection.
"""
type DEdge {
  """
  The item at the end of the edge.
  """
  node: D!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DOrderByInput {
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DPreviousValues {
  field: Json
}

type DSubscriptionPayload {
  mutation: MutationType!
  node: D
  updatedFields: [String!]
  previousValues: DPreviousValues
}

input DSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [DSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DWhereInput
}

input DUpdateManyMutationInput {
  field: Json
}

input DWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [DWhereInput!]
  c: CWhereInput
  b: BWhereInput
  a: AWhereInput
  d_every: DWhereInput
  d_some: DWhereInput
  d_none: DWhereInput
}

type E {
  field: Json
  a: A!
}

"""
A connection to a list of items.
"""
type EConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [EEdge]!
  aggregate: AggregateE!
}

input ECreateInput {
  field: Json
  a: ACreateOneWithoutEInput!
}

input ECreateManyWithoutAInput {
  create: [ECreateWithoutAInput!]
}

input ECreateWithoutAInput {
  field: Json
}

"""
An edge in a connection.
"""
type EEdge {
  """
  The item at the end of the edge.
  """
  node: E!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EOrderByInput {
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EPreviousValues {
  field: Json
}

type ESubscriptionPayload {
  mutation: MutationType!
  node: E
  updatedFields: [String!]
  previousValues: EPreviousValues
}

input ESubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ESubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ESubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ESubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EWhereInput
}

input EUpdateManyMutationInput {
  field: Json
}

input EWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [EWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EWhereInput!]
  a: AWhereInput
}

"""
Raw JSON value
"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createE(data: ECreateInput!): E!
  createD(data: DCreateInput!): D!
  createA(data: ACreateInput!): A!
  createC(data: CCreateInput!): C!
  createB(data: BCreateInput!): B!
  updateManyEs(data: EUpdateManyMutationInput!, where: EWhereInput): BatchPayload!
  updateManyDs(data: DUpdateManyMutationInput!, where: DWhereInput): BatchPayload!
  updateManyAs(data: AUpdateManyMutationInput!, where: AWhereInput): BatchPayload!
  updateManyCs(data: CUpdateManyMutationInput!, where: CWhereInput): BatchPayload!
  updateManyBs(data: BUpdateManyMutationInput!, where: BWhereInput): BatchPayload!
  deleteManyEs(where: EWhereInput): BatchPayload!
  deleteManyDs(where: DWhereInput): BatchPayload!
  deleteManyAs(where: AWhereInput): BatchPayload!
  deleteManyCs(where: CWhereInput): BatchPayload!
  deleteManyBs(where: BWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  es(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [E]!
  ds(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [D]!
  as(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A]!
  cs(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [C]!
  bs(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B]!
  esConnection(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EConnection!
  dsConnection(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DConnection!
  asConnection(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AConnection!
  csConnection(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CConnection!
  bsConnection(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  e(where: ESubscriptionWhereInput): ESubscriptionPayload
  d(where: DSubscriptionWhereInput): DSubscriptionPayload
  a(where: ASubscriptionWhereInput): ASubscriptionPayload
  c(where: CSubscriptionWhereInput): CSubscriptionPayload
  b(where: BSubscriptionWhereInput): BSubscriptionPayload
}


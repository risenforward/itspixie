package com.prisma.deploy.connector.postgres.database

import com.prisma.deploy.connector.{FieldRequirement, FieldRequirementsInterface}
import com.prisma.shared.models.FieldTemplate

case class PostgresFieldRequirement(isActive: Boolean) extends FieldRequirementsInterface {
  val idFieldRequirementForPassive = Vector(FieldRequirement("id", Vector("ID", "UUID", "Int"), required = true, unique = true, list = false))
  val idFieldRequirementForActive  = Vector(FieldRequirement("id", Vector("ID", "UUID"), required = true, unique = true, list = false))

  val baseReservedFieldsRequirements = Vector(
    FieldRequirement("updatedAt", "DateTime", required = true, unique = false, list = false),
    FieldRequirement("createdAt", "DateTime", required = true, unique = false, list = false)
  )

  val reservedFieldsRequirementsForActive  = baseReservedFieldsRequirements ++ idFieldRequirementForActive
  val reservedFieldsRequirementsForPassive = baseReservedFieldsRequirements ++ idFieldRequirementForPassive

  val reservedFieldRequirements: Vector[FieldRequirement] = if (isActive) reservedFieldsRequirementsForActive else reservedFieldsRequirementsForPassive
  val requiredReservedFields: Vector[FieldRequirement]    = if (isActive) Vector.empty else idFieldRequirementForPassive
  val hiddenReservedField: Vector[FieldTemplate]          = Vector.empty
  val isAutogenerated: Boolean                            = false
}

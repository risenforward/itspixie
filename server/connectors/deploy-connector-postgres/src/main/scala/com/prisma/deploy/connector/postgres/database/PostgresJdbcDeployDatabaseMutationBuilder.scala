package com.prisma.deploy.connector.postgres.database

import com.prisma.connector.shared.jdbc.SlickDatabase
import com.prisma.deploy.connector.jdbc.database.{JdbcDeployDatabaseMutationBuilder, TypeMapper}
import com.prisma.shared.models.Model
import com.prisma.shared.models.TypeIdentifier.ScalarTypeIdentifier
import slick.dbio.{DBIOAction => DatabaseAction}
import scala.concurrent.ExecutionContext

case class PostgresJdbcDeployDatabaseMutationBuilder(
    slickDatabase: SlickDatabase,
    typeMapper: TypeMapper
)(implicit val ec: ExecutionContext)
    extends JdbcDeployDatabaseMutationBuilder {

  import slickDatabase.profile.api._

  override def createModelTable(projectId: String, model: Model): DBIOAction[Any, NoStream, Effect.All] = {
    val idField = model.idField_!
    val sqlType = if (idField.isAutoGenerated) "SERIAL" else typeMapper.rawSqlTypeForScalarTypeIdentifier(idField.isList, idField.typeIdentifier)

    sqlu"""
           CREATE TABLE "#$projectId"."#${model.dbName}" (
              "#${idField.dbName}" #$sqlType NOT NULL,
              PRIMARY KEY ("#${idField.dbName}")
           )
      """
  }

  override def createScalarListTable(projectId: String,
                                     model: Model,
                                     fieldName: String,
                                     typeIdentifier: ScalarTypeIdentifier): DBIOAction[Any, NoStream, Effect.All] = {
    val sqlType = typeMapper.rawSqlTypeForScalarTypeIdentifier(isList = false, typeIdentifier)

    sqlu"""
           CREATE TABLE "#$projectId"."#${model.dbName}_#$fieldName"(
              "nodeId" VARCHAR (25) NOT NULL REFERENCES "#$projectId"."#${model.dbName}" ("#${model.dbNameOfIdField_!}"),
              "position" INT NOT NULL,
              "value" #$sqlType NOT NULL,
              PRIMARY KEY ("nodeId", "position")
           )
      """
  }

  override def createRelationTable(projectId: String, relationTableName: String, modelA: Model, modelB: Model): DBIOAction[Any, NoStream, Effect.All] = {
    val sqlTypeForIdOfModelA = typeMapper.rawSqlTypeForScalarTypeIdentifier(isList = modelA.idField_!.isList, modelA.idField_!.typeIdentifier)
    val sqlTypeForIdOfModelB = typeMapper.rawSqlTypeForScalarTypeIdentifier(isList = modelB.idField_!.isList, modelB.idField_!.typeIdentifier)
    val tableCreate          = sqlu"""
                                  CREATE TABLE "#$projectId"."#$relationTableName" (
                                      "id" CHAR(25)  NOT NULL,
                                      PRIMARY KEY ("id"),
                                      "A" #$sqlTypeForIdOfModelA NOT NULL,
                                      "B" #$sqlTypeForIdOfModelB NOT NULL,
                                      FOREIGN KEY ("A") REFERENCES "#$projectId"."#${modelA.dbName}"("#${modelA.dbNameOfIdField_!}") ON DELETE CASCADE,
                                      FOREIGN KEY ("B") REFERENCES "#$projectId"."#${modelB.dbName}"("#${modelA.dbNameOfIdField_!}") ON DELETE CASCADE
                                  );"""

    val indexCreate = sqlu"""CREATE UNIQUE INDEX "#${relationTableName}_AB_unique" on  "#$projectId"."#$relationTableName" ("A" ASC, "B" ASC)"""
    val indexA      = sqlu"""CREATE INDEX "#${relationTableName}_A" on "#$projectId"."#$relationTableName" ("A" ASC)"""
    val indexB      = sqlu"""CREATE INDEX "#${relationTableName}_B" on "#$projectId"."#$relationTableName" ("B" ASC)"""

    DatabaseAction.seq(tableCreate, indexCreate, indexA, indexB)
  }

  override def createRelationColumn(projectId: String, model: Model, references: Model, column: String): DBIOAction[Any, NoStream, Effect.All] = {
    val sqlType    = typeMapper.rawSqlTypeForScalarTypeIdentifier(isList = model.idField_!.isList, model.idField_!.typeIdentifier)
    val isRequired = false //field.exists(_.isRequired)
    val nullString = if (isRequired) "NOT NULL" else "NULL"

    sqlu"""ALTER TABLE "#$projectId"."#${model.dbName}" ADD COLUMN "#$column" #$sqlType #$nullString
           REFERENCES "#$projectId"."#${references.dbName}"(#${references.dbNameOfIdField_!}) ON DELETE SET NULL;"""
  }

  override def createColumn(projectId: String,
                            tableName: String,
                            columnName: String,
                            isRequired: Boolean,
                            isUnique: Boolean,
                            isList: Boolean,
                            typeIdentifier: ScalarTypeIdentifier): DBIOAction[Any, NoStream, Effect.All] = {
    val fieldSQL = typeMapper.rawSQLFromParts(columnName, isRequired, isList, typeIdentifier)
    val uniqueAction = isUnique match {
      case true  => addUniqueConstraint(projectId, tableName, columnName, isList)
      case false => DatabaseAction.successful(())
    }

    val addColumn = sqlu"""ALTER TABLE "#$projectId"."#$tableName" ADD COLUMN #$fieldSQL"""
    DatabaseAction.seq(addColumn, uniqueAction)
  }

  override def updateScalarListType(projectId: String, modelName: String, fieldName: String, typeIdentifier: ScalarTypeIdentifier) = {
    val sqlType = typeMapper.rawSqlTypeForScalarTypeIdentifier(isList = false, typeIdentifier)
    sqlu"""ALTER TABLE "#$projectId"."#${modelName}_#$fieldName" DROP INDEX "value", CHANGE COLUMN "value" "value" #$sqlType, ADD INDEX "value" ("value" ASC)"""
  }

  override def updateColumn(projectId: String,
                            tableName: String,
                            oldColumnName: String,
                            newColumnName: String,
                            newIsRequired: Boolean,
                            newIsList: Boolean,
                            newTypeIdentifier: ScalarTypeIdentifier): DBIOAction[Any, NoStream, Effect.All] = {
    val nulls   = if (newIsRequired) { "SET NOT NULL" } else { "DROP NOT NULL" }
    val sqlType = typeMapper.rawSqlTypeForScalarTypeIdentifier(newIsList, newTypeIdentifier)
    val renameIfNecessary =
      if (oldColumnName != newColumnName) sqlu"""ALTER TABLE "#$projectId"."#$tableName" RENAME COLUMN "#$oldColumnName" TO "#$newColumnName""""
      else DatabaseAction.successful(())

    DatabaseAction.seq(
      sqlu"""ALTER TABLE "#$projectId"."#$tableName" ALTER COLUMN "#$oldColumnName" TYPE #$sqlType""",
      sqlu"""ALTER TABLE "#$projectId"."#$tableName" ALTER COLUMN "#$oldColumnName" #$nulls""",
      renameIfNecessary
    )
  }
}
